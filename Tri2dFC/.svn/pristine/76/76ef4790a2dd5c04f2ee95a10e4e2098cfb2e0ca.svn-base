#include "Tri2dFCBlockSolver.h"


void Tri2dFCBlockSolver::rhsInviscid()
{
  // contributions from interior edges
  int n1,n2;
  double a=.5,b=.5,Ax,Ay,fi[nq];
  for (int n=0; n<nEdge; n++){
    n1     = edge(n,0);
    n2     = edge(n,1);
    Ax     = area(n,0);
    Ay     = area(n,1);
    sys->rhsInvFlux(1,a,b,&Ax,&Ay,&q(n1,0),&q(n2,0),&qa(n1,0),&qa(n2,0),&fi[0]);
    for (int k=0; k<nq; k++){
      r(n1,k) += fi[k];
      r(n2,k) -= fi[k];
    }}


  // contributions from boundary edges
  int m=0;
  a = 5./6.;
  b = 1./6.;
  for (int n=nEdge-nEdgeBd; n<nEdge; n++){
    n1     = edge(n,0);
    n2     = edge(n,1);
    Ax     = areaBd(m  ,0);
    Ay     = areaBd(m++,1);
    sys->rhsInvFlux(1,a,b,&Ax,&Ay,&q(n1,0),&q(n2,0),&qa(n1,0),&qa(n2,0),&fi[0]);
    for (int k=0; k<nq; k++) r(n1,k) += fi[k];
    sys->rhsInvFlux(1,b,a,&Ax,&Ay,&q(n1,0),&q(n2,0),&qa(n1,0),&qa(n2,0),&fi[0]);
    for (int k=0; k<nq; k++) r(n2,k) += fi[k];
  }


  // 3rd order correction terms
  if (order == 3){
    // compute gradient of the flux
    Array2D<double> f(nNode,nq),fx(nNode,nq),fy(nNode,nq);
    Array2D<double> g(nNode,nq),gx(nNode,nq),gy(nNode,nq);
    sys->rhsInvFluxX(nNode,&q(0,0),&qa(0,0),&f(0,0));
    sys->rhsInvFluxY(nNode,&q(0,0),&qa(0,0),&g(0,0));
    gradient(nq,&f(0,0),&fx(0,0),&fy(0,0));
    gradient(nq,&g(0,0),&gx(0,0),&gy(0,0));


    // compute limiter
    if (!limiterComputed) limit();
    limiterComputed = true;


    // add correction terms
    double dx,dy;
    for (int n=0; n<nEdge; n++){
      n1     = edge(n,0);
      n2     = edge(n,1);
      dx     = .25*(x(n2,0)-x(n1,0));
      dy     = .25*(x(n2,1)-x(n1,1));
      Ax     = area(n,0);
      Ay     = area(n,1);
      for (int k=0; k<nq; k++){
	fi[k]    =(Ax*(dx*(fx(n2,k)-fx(n1,k))+dy*(fy(n2,k)-fy(n1,k)))
		 + Ay*(dx*(gx(n2,k)-gx(n1,k))+dy*(gy(n2,k)-gy(n1,k))))*lim(n,k);
	r(n1,k) -= fi[k];
	r(n2,k) += fi[k];
      }}

    m = 0;
    a = 1./12.;
    for (int n=nEdge-nEdgeBd; n<nEdge; n++){
      n1     = edge(n,0);
      n2     = edge(n,1);
      dx     = a*(x(n2,0)-x(n1,0));
      dy     = a*(x(n2,1)-x(n1,1));
      Ax     = areaBd(m  ,0);
      Ay     = areaBd(m++,1);
      for (int k=0; k<nq; k++){
	fi[k]    =(Ax*(dx*(fx(n2,k)-fx(n1,k))+dy*(fy(n2,k)-fy(n1,k)))
		 + Ay*(dx*(gx(n2,k)-gx(n1,k))+dy*(gy(n2,k)-gy(n1,k))))*lim(n,k);
	r(n1,k) -= fi[k];
	r(n2,k) -= fi[k];
      }}


    f.deallocate();
    fx.deallocate();
    fy.deallocate();
    g.deallocate();
    gx.deallocate();
    gy.deallocate();
  }
}
