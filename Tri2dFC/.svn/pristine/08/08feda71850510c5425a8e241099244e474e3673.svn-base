/**
 * \brief
 * Class Tri2dFCSPLam
 * holds the data and specifies the operations for the single phase inviscid
 * or laminar viscous system of equations.
 * \author
 * Aaron Katz
 * \version
 * 1.0
 * \date
 * 2012-09-11
 */

#ifndef included_Tri2dFCSPLam
#define included_Tri2dFCSPLam

#include "Tri2dFCSystem.h"
#include "State.h"
#include "Transport.h"
#include "Solution.h"
#include "Tri2dFCSPLamBc.h"
#include "Tri2dFCSPLamBcInviscidWall.h"
#include "Tri2dFCSPLamBcViscousWall.h"
#include "Tri2dFCSPLamBcInflow.h"
#include "Tri2dFCSPLamBcOutflow.h"
#include "Tri2dFCSPLamBcFarField.h"
#include "Tri2dFCSPLamBcDirichlet.h"
#include "Tri2dFCSPLamBcFrozen.h"
#include "Tri2dFCSPLamBcSymmetry.h"
#include "Tri2dFCSPLamBcPeriodic.h"
#include "Tri2dFCSPLamBcNothing.h"


class Tri2dFCSPLam: public Tri2dFCSystem
{
 public:

  /**
   * \brief
   * Constructor for the Tri2dFCSPLam class.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-11
   * \par Further Documentation:
   * \par Source Code:
   * \snippet src/System/SPLam/Tri2dFCSPLam.C Tri2dFCSPLam
   */
  Tri2dFCSPLam();

  /**
   * \brief
   * Destructor for the Tri2dFCSPLam class.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-11
   * \par Further Documentation:
   * \par Source Code:
   * \snippet src/System/SPLam/Tri2dFCSPLam.C ~Tri2dFCSPLam
   */
  ~Tri2dFCSPLam();

  /**
   * \brief
   * Reads inputs for the System layer, and allocates instances of
   * boundary conditions and Physics classes.
   * \param inputFile name of System input file.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-11
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/inputRead.C
   */
  void inputRead(const string& inputFile);

  /**
   * \brief
   * Provides relevant System data to the Numerics routines
   * \param iPrint Specifes whether inputs are printed out; usually iprint
   * is set to 1 in node 0.
   * \param iTest Specifies whether run is in unit test mode.
   * \param iDebug Specifies whether run is in debug mode, i.e., triggers
   * more verbose data.
   * \param tmp Temporary dimension of iqgrad,iqgrada. Typically set to
   * something large, like 500. This is needed because the main program
   * does not know the dimension of iqgrad,iqagrad yet.
   * iSolnFile Flag to write solution variables to file.
   * iResdFile Flag to write residual variables to file.
   * iErrFile Flag to write error variables to file.
   * \param nq Total number of equations or Q variables in system.
   * \param nqa Total number of additional variables to be stored.
   * \param ndim Number of spatial dimensions.
   * \param inviscid Flag to add inviscid terms (0 do not add, 1 add).
   * \param viscous Flag to add viscous terms (0 do not add, 1 add).
   * \param source Flag to add physical source terms
   * (0 do not add, 1 physical source).
   * \param sourceMMS Flag to add MMS source terms
   * (0 do not add, 1 MMS source).
   * \param dissipation Flag to add dissipation (0 do not add, 1 add).
   * \param nBpatches Number of boundary patches.
   * \param iqgrad Dimension (tmp), flag for whether gradient of Q is
   * required: 0 or 1 for each.
   * \param iqagrad Dimension (tmp), flag for whether gradient of Qa is
   * required: 0 or 1 for each.
   * \param dlim Constant used in limiter computations.
   * \param rmsNorm normalization values for Q.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-11
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/prepSetup.C
   */
  void prepSetup(const int& iPrint,
                 const int& iTest,
                 const int& iDebug,
                 const int& tmp,
		 const int& iSolnFile,
		 const int& iResdFile,
		 const int& iErrFile,
                 int& nq,
                 int& nqa,
                 int& ndim,
                 int& inviscid,
                 int& viscous,
                 int& source,
                 int& sourceMMS,
                 int& dissipation,
                 int& nBpatches,
                 int* iqgrad,
                 int* iqagrad,
                 double* dlim,
                 double* rmsNorm,
		 int& nOutputVars,
		 int* outputVarLength,
		 string* outputVars);

  /**
   * \brief
   * Initializes q over a set of dof locations.
   * \param npts Number of points at which to set q.
   * \param x Coordinates of each dof, laid out in (x,y) pairs.
   * \param q Solution vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-25
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/initFlow.C
   */
  void initFlow(const int& npts,
		const double* x,
		double* q);

  /**
   * \brief
   * Initializes source terms over a set of dof locations.
   * \param npts Number of points at which to set q.
   * \param x Coordinates of each dof, laid out in (x,y) pairs.
   * \param s Source term vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-25
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/initSource.C
   */
  void initSource(const int& npts,
		  const double* x,
		  double* s);

  /**
   * \brief
   * Computes additional variables as a function of Q.
   * \param npts Number of points at which to set qa.
   * \param q Q vector.
   * \param qa Additional Q vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/stepQAdd.C
   */
  void stepQAdd(const int& npts,
		const double* q,
		double* qa);

  /**
   * \brief
   * Computes directed inviscid flux vectors.
   * \param npts Number of points at which to compute the flux.
   * \param aL Left flux weight.
   * \param aR Right flux weight.
   * \param Ax X-component of Area vector.
   * \param Ay Y-component of Area vector.
   * \param qL Left state Q vector.
   * \param qR Right state Q vector.
   * \param qaL Left state additional Q vector.
   * \param qaR Right state additional Q vector.
   * \param f directed inviscid flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsInvFlux.C
   */
  void rhsInvFlux(const int& npts,
		  const double& aL,
		  const double& aR,
		  const double* Ax,
		  const double* Ay,
		  const double* qL,
		  const double* qR,
		  const double* qaL,
		  const double* qaR,
		  double* f);

  /**
   * \brief
   * Computes the X-inviscid flux.
   * \param npts Number of points at which to compute the flux.
   * \param q Q vector.
   * \param qa Additional Q vector.
   * \param f X-inviscid flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsInvFluxX.C
   */
  void rhsInvFluxX(const int& npts,
		   const double* q,
		   const double* qa,
		   double* f);

  /**
   * \brief
   * Computes the Y-inviscid flux.
   * \param npts Number of points at which to compute the flux.
   * \param q Q vector.
   * \param qa Additional Q vector.
   * \param g Y-inviscid flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsInvFluxY.C
   */
  void rhsInvFluxY(const int& npts,
		   const double* q,
		   const double* qa,
		   double* g);

  /**
   * \brief
   * Computes the X/Y-viscous flux.
   * \param npts Number of points at which to compute the flux.
   * \param q Q vector.
   * \param qa Additional Q vector.
   * \param qax dQa/dx vector.
   * \param qay dQa/dy vector.
   * \param f X-viscous flux vector.
   * \param g Y-viscous flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsVisFlux.C
   */
  void rhsVisFlux(const int& npts,
		  const double* q,
		  const double* qa,
		  const double* qax,
		  const double* qay,
		  double* f,
		  double* g);

  /**
   * \brief
   * Computes the X-viscous flux.
   * \param npts Number of points at which to compute the flux.
   * \param q Q vector.
   * \param qa Additional Q vector.
   * \param qax dQa/dx vector.
   * \param qay dQa/dy vector.
   * \param f X-viscous flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsVisFluxX.C
   */
  void rhsVisFluxX(const int& npts,
		   const double* q,
		   const double* qa,
		   const double* qax,
		   const double* qay,
		   double* f);

  /**
   * \brief
   * Computes the Y-viscous flux.
   * \param npts Number of points at which to compute the flux.
   * \param q Q vector.
   * \param qa Additional Q vector.
   * \param qax dQa/dx vector.
   * \param qay dQa/dy vector.
   * \param g Y-viscous flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsVisFluxY.C
   */
  void rhsVisFluxY(const int& npts,
		   const double* q,
		   const double* qa,
		   const double* qax,
		   const double* qay,
		   double* g);

  /**
   * \brief
   * Computes directed dissipation flux vector.
   * \param npts Number of points at which to compute the flux.
   * \param nx X-component of direction vector.
   * \param ny Y-component of direction vector.
   * \param qL Left Q vector.
   * \param qR Right Q vector.
   * \param f directed dissipation flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsDisFlux.C
   */
  void rhsDisFlux(const int& npts,
		  const double* Lr,
		  const double* nx,
		  const double* ny,
		  const double* qL,
		  const double* qR,
		  double* f);

  /**
   * \brief
   * Computes viscous flux using the Galerkin method on triangles.
   * \param npts Number of triangles at which to compute the flux.
   * \param vr Inverse of the area of the triangle.
   * \param cx Face areas of the the three sides of the triangle.
   * \param q Q vector at the three nodes of the triangle.
   * \param qa Qa vector at the three nodes of the triangle.
   * \param f Viscous X-flux vector.
   * \param g Viscous Y-flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsVisFluxGalerkin.C
   */
  void rhsVisFluxGalerkin(const int& npts,
			  const double* vr,
			  const double* cx,
			  const double* q,
			  const double* qa,
			  double* f,
			  double* g);

  /**
   * \brief
   * Computes invsicid spectral radius.
   * \param npts Number of points at which to compute the flux.
   * \param aL Weight coefficient for left state.
   * \param aR Weight coefficient for right state.
   * \param Ax X-component of area vector.
   * \param Ay Y-component of area vector.
   * \param qL Left Q vector.
   * \param qR Right Q vector.
   * \param qaL Left Qa vector.
   * \param qaR Right Qa vector.
   * \param sr Inviscid spectral radius.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/stepInvEigenvalue.C
   */
  void stepInvEigenvalue(const int& npts,
			 const double& aL,
			 const double& aR,
			 const double* Ax,
			 const double* Ay,
			 const double* qL,
			 const double* qR,
			 const double* qaL,
			 const double* qaR,
			 double* sr);

  /**
   * \brief
   * Computes viscous spectral radius.
   * \param npts Number of points at which to compute the flux.
   * \param aL Weight coefficient for left state.
   * \param aR Weight coefficient for right state.
   * \param Ax X-component of area vector.
   * \param Ay Y-component of area vector.
   * \param qL Left Q vector.
   * \param qR Right Q vector.
   * \param qaL Left Qa vector.
   * \param qaR Right Qa vector.
   * \param vL Left volume.
   * \param vR Right volume.
   * \param sr Inviscid spectral radius.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/stepVisEigenvalue.C
   */
  void stepVisEigenvalue(const int& npts,
			 const double& aL,
			 const double& aR,
			 const double* Ax,
			 const double* Ay,
			 const double* qL,
			 const double* qR,
			 const double* qaL,
			 const double* qaR,
			 const double* vL,
			 const double* vR,
			 double* sr);

  /**
   * \brief
   * Resolves boundary conflicts at sharp corners.
   * \param npts Number of boundary points to update.
   * \param tag Current boundary tag.
   * \param tagC Candidate boundary tag.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2013-04-24
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/bcConflict.C
   */
  void bcConflict(const int& npts,
		  int* tag,
		  const int* tagC);

  /**
   * \brief
   * Provides the BC Vector (boundary residual).
   * (Neumann gradient conditions to be added soon)
   * \param npts Number of boundary points to update.
   * \param tag Boundary tag.
   * \param nx Outward boundary normal in (nx,ny) pairs.
   * \param q Q vector at boundary.
   * \param qa Qa vector at boundary.
   * \param rb boundary residual vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2013-04-24
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsBCVector.C
   */
  void rhsBCVector(const int& npts,
		   const int* tag,
		   const double* nx,
		   const double* q,
		   const double* qa,
		   double* rb);

  /**
   * \brief
   * Provides the Jacobian of the BC Vector with respect to Q at the boundary.
   * (Neumann gradient conditions to be added soon)
   * \param npts Number of boundary points to update.
   * \param tag Boundary tag.
   * \param nx Outward boundary normal in (nx,ny) pairs.
   * \param q Q vector at boundary.
   * \param qa Qa vector at boundary.
   * \param M boundary residual vector Jacobian.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2013-04-24
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/lhsBCVectorSelfJacobian.C
   */
  void lhsBCVectorSelfJacobian(const int& npts,
			       const int* tag,
			       const double* nx,
			       const double* q,
			       const double* qa,
			       double* M);

  /**
   * \brief
   * Provides the BC selection matrix.
   * \param npts Number of boundary points to update.
   * \param tag Boundary tag.
   * \param nx Outward boundary normal in (nx,ny) pairs.
   * \param q Q vector at boundary.
   * \param qa Qa vector at boundary.
   * \param L Selection matrix.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2013-04-24
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsBCSelectionMatrix.C
   */
  void rhsBCSelectionMatrix(const int& npts,
			    const int* tag,
			    const double* nx,
			    const double* q,
			    const double* qa,
			    double* L);

  /**
   * \brief
   * Prints out a block of specified output data.
   * npts Number of output points.
   * ffile Ouput file stream.
   * outputVar String containing variable to output.
   * q Q vector.
   * qa Qa vector.
   * qe Exact Q vector.
   * r Residual vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/outputSolution.C
   */
  void outputSolution(const int& npts,
		      ofstream& ffile,
		      const string& outputVar,
		      const double* q,
		      const double* qa,
		      const double* e,
		      const double* r);

  /**
   * \brief
   * Returns surface forces.
   * npts Number of surface points at which to compute forces.
   * tag Boundary tag.
   * A Ouward pointing face area vector of boundary location.
   * q Q vector.
   * qx X-component of gradient of Q vector.
   * qy Y-component of gradient of Q vector.
   * qa Qa vector.
   * qax X-component of gradient of Qa vector.
   * qay Y-component of gradient of Qa vector.
   * force Force vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2013-5-28
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/outputSurfaceForces.C
   */
  void outputSurfaceForces(const int& npts,
			   const int* tag,
			   const double* A,
			   const double* q,
			   const double* qx,
			   const double* qy,
			   const double* qa,
			   const double* qax,
			   const double* qay,
			   double* force);

  /**
   * \brief
   * Finalizes the StrandSystem class instance.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-04
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/finalize.C
   */
  void finalize();


 private:

  State state;
  Transport transport;
  Solution solution;
  Tri2dFCSPLamBc** bc;
  double gamma;
  double gm1;
  double ggm1;
  double rGas;
  int* bType;
};
#endif
