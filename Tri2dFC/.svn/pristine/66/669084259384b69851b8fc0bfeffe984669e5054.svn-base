#include "Tri2dFCSPLamBcInviscidWall.h"


// [Tri2dFCSPLamBcInviscidWall]
Tri2dFCSPLamBcInviscidWall::Tri2dFCSPLamBcInviscidWall()
{
}
// [Tri2dFCSPLamBcInviscidWall]


// [~Tri2dFCSPLamBcInviscidWall]
Tri2dFCSPLamBcInviscidWall::~Tri2dFCSPLamBcInviscidWall()
{
}
// [~Tri2dFCSPLamBcInviscidWall]


// [BCVector]
void Tri2dFCSPLamBcInviscidWall::BCVector(const double* nx,
					  const double* q,
					  const double* qa,
					  double* rb)
{
  double u,v,un;
  u     = qa[1];
  v     = qa[2];
  un    = q[0]*(nx[0]*u+nx[1]*v);

  rb[0] = 0.;
  rb[1] = 0.;
  rb[2] = 0.;
  rb[3] = un-0.; //normal velocity
}
// [BCVector]


// [BCVectorSelfJacobian]
void Tri2dFCSPLamBcInviscidWall::BCVectorSelfJacobian(const double* nx,
						      const double* q,
						      const double* qa,
						      double* M)
{
  double rr,u,v,un;
  rr    = 1./q[0];
  u     = qa[1];
  v     = qa[2];
  un    = nx[0]*u+nx[1]*v;

  M[0 ] = 0.;
  M[1 ] = 0.;
  M[2 ] = 0.;
  M[3 ] = 0.;

  M[4 ] = 0.;
  M[5 ] = 0.;
  M[6 ] = 0.;
  M[7 ] = 0.;

  M[8 ] = 0.;
  M[9 ] = 0.;
  M[10] = 0.;
  M[11] = 0.;

  M[12] = 0.;//-rr*un;
  M[13] = nx[0];//rr*nx[0];
  M[14] = nx[1];//rr*nx[1];
  M[15] = 0.;
}
// [BCVectorSelfJacobian]


// [BCSelectionMatrix]
void Tri2dFCSPLamBcInviscidWall::BCSelectionMatrix(const double* nx,
						   const double* q,
						   const double* qa,
						   double* L)
{
  double ccr,qq,u,v,ut,un,c;
  u     = qa[1];
  v     = qa[2];
  un    = nx[0]*u+nx[1]*v;
  ut    =-nx[1]*u+nx[0]*v;
  qq    = u*u+v*v;
  c     = sqrt(gamma*qa[0]/q[0]);
  ccr   = 1./(c*c);

  L[0 ] =-ccr*gm1*qq*.5+1.;
  L[1 ] = ccr*gm1*u;
  L[2 ] = ccr*gm1*v;
  L[3 ] =-ccr*gm1;

  L[4 ] = ut;
  L[5 ] = nx[1];
  L[6 ] =-nx[0];
  L[7 ] = 0.;

  L[8 ] = ccr*( gm1*qq*.5-c*un   )*.5;
  L[9 ] = ccr*(-gm1*u    +c*nx[0])*.5;
  L[10] = ccr*(-gm1*v    +c*nx[1])*.5;
  L[11] = ccr*( gm1              )*.5;

  L[12] = 0.;
  L[13] = 0.;
  L[14] = 0.;
  L[15] = 0.;
}
// [BCSelectionMatrix]


// [surfaceForces]
void Tri2dFCSPLamBcInviscidWall::surfaceForces(const double* A,
					       const double* q,
					       const double* qx,
					       const double* qy,
					       const double* qa,
					       const double* qax,
					       const double* qay,
					       double* force)
{
  force[0] = qa[0]*A[0];
  force[1] = qa[0]*A[1];
}
// [surfaceForces]
