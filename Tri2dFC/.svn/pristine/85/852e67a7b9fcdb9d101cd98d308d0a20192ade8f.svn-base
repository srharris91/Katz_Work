#include "Tri2dFCSPLamBcInviscidWall.h"


// [Tri2dFCSPLamBcInviscidWall]
Tri2dFCSPLamBcInviscidWall::Tri2dFCSPLamBcInviscidWall()
{
}
// [Tri2dFCSPLamBcInviscidWall]


// [~Tri2dFCSPLamBcInviscidWall]
Tri2dFCSPLamBcInviscidWall::~Tri2dFCSPLamBcInviscidWall()
{
}
// [~Tri2dFCSPLamBcInviscidWall]


// [BCVector]
void Tri2dFCSPLamBcInviscidWall::BCVector(const double* nx,
					  const double* q,
					  const double* qa,
					  double* rb)
{
  /*
  rb[0] = q[0]-1.1765832926914233;
  rb[1] = 0.;//qa[1]-68.64976837305731;
  rb[2] = q[2];//nx[0]*qa[1]+nx[1]*qa[2]; //normal velocity
  rb[3] = q[3]-256084.99539841764;
  //rb[3] = qa[0]-bValue[0];
  */

  rb[0] = 0.;
  rb[1] = 0.;
  rb[2] = nx[0]*qa[1]+nx[1]*qa[2]; //normal velocity
  rb[3] = 0.;

  //cout.setf(ios::scientific);
  //for (int k=0; k<nq; k++) cout << rb[k] << " ";
  //cout << endl;
}
// [BCVector]


// [BCVectorSelfJacobian]
void Tri2dFCSPLamBcInviscidWall::BCVectorSelfJacobian(const double* nx,
						      const double* q,
						      const double* qa,
						      double* M)
{
  double rr,u,v,un,qq;
  rr    = 1./q[0];
  u     = qa[1];
  v     = qa[2];
  un    = nx[0]*u+nx[1]*v;
  qq    = u*u+v*v;

  M[0 ] = 0.;
  M[1 ] = 0.;
  M[2 ] = 0.;
  M[3 ] = 0.;

  M[4 ] = 0.;//-rr*u;
  M[5 ] = 0.;//rr;
  M[6 ] = 0.;
  M[7 ] = 0.;

  M[8 ] =-rr*un;
  M[9 ] = rr*nx[0];
  M[10] = rr*nx[1];
  M[11] = 0.;

  M[12] = 0.;
  M[13] = 0.;
  M[14] = 0.;
  M[15] = 0.;

  /*
  M[12] = gm1*qq*.5;
  M[13] =-gm1*u;
  M[14] =-gm1*v;
  M[15] = gm1;
  */
}
// [BCVectorSelfJacobian]


// [BCSelectionMatrix]
void Tri2dFCSPLamBcInviscidWall::BCSelectionMatrix(const double* nx,
						   const double* q,
						   const double* qa,
						   double* L)
{
  for (int n=0; n<nq*nq; n++) L[n] = 0.;
  L[0 ] = 1.;    //mass
  L[5 ] = nx[1]; //tangential momentum
  L[6 ] =-nx[0];
  //L[13] =-qa[1];
  //L[14] =-qa[2];
  L[15] = 1.;    //energy

  //for (int n=0; n<nq*nq; n++) cout << n << " " << L[n] << endl;
  //exit(0);
}
// [BCSelectionMatrix]
