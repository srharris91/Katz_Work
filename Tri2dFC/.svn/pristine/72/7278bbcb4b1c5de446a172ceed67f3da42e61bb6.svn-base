#include "Tri2dFCBlockSolver.h"


void Tri2dFCBlockSolver::subElements()
{
  nElemS = 3*nElem;
  nneS   = 6; //quadratic elements
  nngS   = 4; //quadratic elements
  elemS.allocate(nElemS,nneS);
  gNode.allocate(nElemS,nngS);
  int m=0;
  for (int n=0; n<nElem; n++){
    elemS(m  ,0) = elem(n,0);
    elemS(m  ,1) = elem(n,4);
    elemS(m  ,2) = elem(n,7);
    elemS(m  ,3) = elem(n,3);
    elemS(m  ,4) = elem(n,9);
    elemS(m  ,5) = elem(n,8);
    gNode(m  ,0) = 0;
    gNode(m  ,1) = 3;
    gNode(m  ,2) = 4;
    gNode(m++,3) = 5;
    elemS(m  ,0) = elem(n,3);
    elemS(m  ,1) = elem(n,1);
    elemS(m  ,2) = elem(n,6);
    elemS(m  ,3) = elem(n,4);
    elemS(m  ,4) = elem(n,5);
    elemS(m  ,5) = elem(n,9);
    gNode(m  ,0) = 1;
    gNode(m  ,1) = 4;
    gNode(m  ,2) = 5;
    gNode(m++,3) = 3;
    elemS(m  ,0) = elem(n,8);
    elemS(m  ,1) = elem(n,5);
    elemS(m  ,2) = elem(n,2);
    elemS(m  ,3) = elem(n,9);
    elemS(m  ,4) = elem(n,6);
    elemS(m  ,5) = elem(n,7);
    gNode(m  ,0) = 2;
    gNode(m  ,1) = 5;
    gNode(m  ,2) = 3;
    gNode(m++,3) = 4;
  }


  /*
  nElemS = 3*nElem;
  nneS   = 6; //quadratic elements
  nngS   = 6; //quadratic elements
  elemS.allocate(nElemS,nneS);
  gNode.allocate(nElemS,nngS);
  int m=0;
  for (int n=0; n<nElem; n++){
    elemS(m  ,0) = elem(n,0);
    elemS(m  ,1) = elem(n,4);
    elemS(m  ,2) = elem(n,7);
    elemS(m  ,3) = elem(n,3);
    elemS(m  ,4) = elem(n,9);
    elemS(m  ,5) = elem(n,8);
    gNode(m  ,0) = 0;
    gNode(m  ,1) = 1;
    gNode(m  ,2) = 2;
    gNode(m  ,3) = 3;
    gNode(m  ,4) = 4;
    gNode(m++,5) = 5;
    elemS(m  ,0) = elem(n,3);
    elemS(m  ,1) = elem(n,1);
    elemS(m  ,2) = elem(n,6);
    elemS(m  ,3) = elem(n,4);
    elemS(m  ,4) = elem(n,5);
    elemS(m  ,5) = elem(n,9);
    gNode(m  ,0) = 0;
    gNode(m  ,1) = 1;
    gNode(m  ,2) = 2;
    gNode(m  ,3) = 3;
    gNode(m  ,4) = 4;
    gNode(m++,5) = 5;
    elemS(m  ,0) = elem(n,8);
    elemS(m  ,1) = elem(n,5);
    elemS(m  ,2) = elem(n,2);
    elemS(m  ,3) = elem(n,9);
    elemS(m  ,4) = elem(n,6);
    elemS(m  ,5) = elem(n,7);
    gNode(m  ,0) = 0;
    gNode(m  ,1) = 1;
    gNode(m  ,2) = 2;
    gNode(m  ,3) = 3;
    gNode(m  ,4) = 4;
    gNode(m++,5) = 5;
  }
*/


  /*
  for (int n=0; n<nElemS; n++){
    cout << n << " ";
    for (int j=0; j<nneS; j++) cout << elemS(n,j) << " ";
    cout << endl;
  }
  exit(0);
  */
}
