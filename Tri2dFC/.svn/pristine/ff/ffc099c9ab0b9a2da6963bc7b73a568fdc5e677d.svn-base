#include "Tri2dFCBlockSolver.h"


void Tri2dFCBlockSolver::gradient(const int& nqp,
				  const double* p,
				  double* px,
				  double* py)
{
  if       (order == 1){ //zero gradients
    for (int n=0; n<nNode*nqp; n++) px[n] = 0.;
    for (int n=0; n<nNode*nqp; n++) py[n] = 0.;
  }

  else if (order == 2){ //Green-Gauss gradients
    for (int n=0; n<nNode*nqp; n++) px[n] = 0.;
    for (int n=0; n<nNode*nqp; n++) py[n] = 0.;
    int n1,n2,k1,k2,m=0;
    double Ax,Ay,a,third=1./3.;
    for (int n=0; n<nEdge; n++){ //interior edges
      n1     = edge(n,0);
      n2     = edge(n,1);
      Ax     = area(n,0);
      Ay     = area(n,1);
      k1     = n1*nqp;
      k2     = n2*nqp;
      for (int k=0; k<nqp; k++){
	a         = p[k1+k]+p[k2+k];
	px[k1+k] += Ax*a;
	py[k1+k] += Ay*a;
	px[k2+k] -= Ax*a;
	py[k2+k] -= Ay*a;
      }}
    for (int n=nEdge-nEdgeBd; n<nEdge; n++){ //boundary edges
      n1     = edge(n,0);
      n2     = edge(n,1);
      Ax     = areaBd(m  ,0);
      Ay     = areaBd(m++,1);
      k1     = n1*nqp;
      k2     = n2*nqp;
      for (int k=0; k<nqp; k++){
	a         =(5.*p[k1+k]+p[k2+k])*third;
	px[k1+k] += Ax*a;
	py[k1+k] += Ay*a;
	a         =(p[k1+k]+5.*p[k2+k])*third;
	px[k2+k] += Ax*a;
	py[k2+k] += Ay*a;
      }}
    for (int n=0; n<nNode; n++){ //normalize gradients
      a  = .5/v(n);
      k1 = n*nqp;
      for (int k=0; k<nqp; k++){
	px[k1+k] *= a;
	py[k1+k] *= a;
      }}
  }

  else{ //FEM gradients
    if (gradMethod == 0){ //quadratic averaging
      int k1,k2,m;
      double xri,yri,xsi,ysi,dx,dy,a;
      //Array1D<double> sumj(nNode);
      //sumj.set(0.);
      for (int n=0; n<nNode*nqp; n++) px[n] = 0.;
      for (int n=0; n<nNode*nqp; n++) py[n] = 0.;
      for (int n=0; n<nElemS; n++)
	for (int i=0; i<nngS; i++){
	  m   = gNode(n,i);
	  k2  = elemS(n,m)*nqp;
	  //xri = xrS(n,i);
	  //yri = yrS(n,i);
	  //xsi = xsS(n,i);
	  //ysi = ysS(n,i);
	  for (int j=0; j<nneS; j++){
	    //dx = lrS(m,j)*ysi-lsS(m,j)*yri;
	    //dy =-lrS(m,j)*xsi+lsS(m,j)*xri;
	    dx = dxgS(n,i,j,0);
	    dy = dxgS(n,i,j,1);
	    k1 = elemS(n,j)*nqp;
	    for (int k=0; k<nqp; k++){
	      px[k2+k] += p[k1+k]*dx;
	      py[k2+k] += p[k1+k]*dy;
	    }}
	  //sumj(elemS(n,m)) += jacS(n,i);
	}
      for (int n=0; n<nNode; n++){ //normalize gradients
	//a  = 1./sumj(n);
	a  = sumjS(n);
	k1 = n*nqp;
	for (int k=0; k<nqp; k++){
	  px[k1+k] *= a;
	  py[k1+k] *= a;
	}}
      //sumj.deallocate();
    }

    else if (gradMethod == 1){ //cubic everywhere
      int k1,k2;
      double xri,yri,xsi,ysi,dx,dy,a;
      //Array1D<double> sumj(nNode);
      //sumj.set(0.);
      for (int n=0; n<nNode*nqp; n++) px[n] = 0.;
      for (int n=0; n<nNode*nqp; n++) py[n] = 0.;
      for (int n=0; n<nElem; n++)
	for (int i=0; i<nne; i++){
	  k2  = elem(n,i)*nqp;
	  //xri = xr(n,i);
	  //yri = yr(n,i);
	  //xsi = xs(n,i);
	  //ysi = ys(n,i);
	  for (int j=0; j<nne; j++){
	    //dx = lr(i,j)*ysi-ls(i,j)*yri;
	    //dy =-lr(i,j)*xsi+ls(i,j)*xri;
	    dx = dxg(n,i,j,0);
	    dy = dxg(n,i,j,1);
	    k1 = elem(n,j)*nqp;
	    for (int k=0; k<nqp; k++){
	      px[k2+k] += p[k1+k]*dx;
	      py[k2+k] += p[k1+k]*dy;
	    }}
	  //sumj(elem(n,i)) += jac(n,i);
	}
      for (int n=0; n<nNode; n++){ //normalize gradients
	//a  = 1./sumj(n);
	a  = sumj(n);
	k1 = n*nqp;
	for (int k=0; k<nqp; k++){
	  px[k1+k] *= a;
	  py[k1+k] *= a;
	}}
      //sumj.deallocate();
    }

    else{ //cubic interior, quadratic averaging boundaries
      cout << "\nThis gradMethod not recognized." << endl;
      exit(0);
    }}
}
