#include "Tri2dFCBlockSolver.h"


void Tri2dFCBlockSolver::solutionPoints(const int& ord,
					const int& spacing,
					double* rLoc)
{
  // equally spaced with numbering consistent with gmesh format
  if      (spacing == 0){
    if (ord == 0){
      rLoc[0] = 0.;
      rLoc[1] = 0.;
      rLoc[2] = 0.;
    }
    else{
      // equally spaced points on unit right triangle
      int k =(ord+2)*(ord+1)/2,key[k],m=0;
      double rLocT[k*2],dL=1./(double)ord,L0,L1;
      for (int i=0; i<=ord; i++){
	L0 =(double)i*dL;
	for (int j=0; j<=ord-i; j++){
	  L1 =(double)j*dL;
	  rLocT[m++] = L1-L0;
	  rLocT[m++] =(2.-3.*(L0+L1))/sqrt(3.);
	}}

      // key to change numbering to gmesh format
      if      (ord == 1){
	key[0] = 2;
	key[1] = 1;
	key[2] = 0;
      }
      else if (ord == 2){
	key[0] = 5;
	key[1] = 2;
	key[2] = 0;
	key[3] = 4;
	key[4] = 1;
	key[5] = 3;
      }
      else if (ord == 3){
	key[0] = 9;
	key[1] = 3;
	key[2] = 0;
	key[3] = 8;
	key[4] = 6;
	key[5] = 2;
	key[6] = 1;
	key[7] = 4;
	key[8] = 7;
	key[9] = 5;
      }
      else if (ord == 4){
	key[0] = 14;
	key[1] = 4;
	key[2] = 0;
	key[3] = 13;
	key[4] = 11;
	key[5] = 8;
	key[6] = 3;
	key[7] = 2;
	key[8] = 1;
	key[9] = 5;
	key[10] = 9;
	key[11] = 12;
	key[12] = 10;
	key[13] = 7;
	key[14] = 6;
      }
      else if (ord == 5){
	key[0] = 20;
	key[1] = 5;
	key[2] = 0;
	key[3] = 19;
	key[4] = 17;
	key[5] = 14;
	key[6] = 10;
	key[7] = 4;
	key[8] = 3;
	key[9] = 2;
	key[10] = 1;
	key[11] = 6;
	key[12] = 11;
	key[13] = 15;
	key[14] = 18;
	key[15] = 16;
	key[16] = 9;
	key[17] = 7;
	key[18] = 13;
	key[19] = 8;
	key[20] = 12;
      }
      else{
	std::cout << "\nPlease choose ord 5 or lower in solutionPoints.C." << std::endl;
	exit(0);
      }

      // change numbering
      for (int m=0; m<k; m++){
	rLoc[m*3  ] = rLocT[key[m]*2  ];
	rLoc[m*3+1] = rLocT[key[m]*2+1];
	rLoc[m*3+2] = 0.;
      }
    }
  }


  // return barycentric rs coordinates taken from Taylor, Wingate, and Bos
  else if (spacing == 1){
    if      (ord == 0){
      rLoc[0] = 0.3333333333333; rLoc[1] = 0.3333333333333; rLoc[2] = 2.0000000000000;
    }
    else if (ord == 1){
      rLoc[0] = 0.1666666666667; rLoc[1] = 0.6666666666667; rLoc[2] = 0.6666666666667;
      rLoc[3] = 0.6666666666667; rLoc[4] = 0.1666666666667; rLoc[5] = 0.6666666666667;
      rLoc[6] = 0.1666666666667; rLoc[7] = 0.1666666666667; rLoc[8] = 0.6666666666667;
    }
    else if (ord == 2){
      rLoc[0] = 0.0915762135098; rLoc[1] = 0.0915762135098; rLoc[2] = 0.2199034873106;
      rLoc[3] = 0.8168475729805; rLoc[4] = 0.0915762135098; rLoc[5] = 0.2199034873106;
      rLoc[6] = 0.0915762135098; rLoc[7] = 0.8168475729805; rLoc[8] = 0.2199034873106;
      rLoc[9] = 0.1081030181681; rLoc[10] = 0.4459484909160; rLoc[11] = 0.4467631793560;
      rLoc[12] = 0.4459484909160; rLoc[13] = 0.1081030181681; rLoc[14] = 0.4467631793560;
      rLoc[15] = 0.4459484909160; rLoc[16] = 0.4459484909160; rLoc[17] = 0.4467631793560;
    }
    else if (ord == 3){
      rLoc[0] = 0.0000000000000; rLoc[1] = 1.0000000000000; rLoc[2] = 0.0262712099504;
      rLoc[3] = 1.0000000000000; rLoc[4] = 0.0000000000000; rLoc[5] = 0.0262716612068;
      rLoc[6] = 0.0000000000000; rLoc[7] = 0.0000000000000; rLoc[8] = 0.0274163947600;
      rLoc[9] = 0.2673273531185; rLoc[10] = 0.6728199218710; rLoc[11] = 0.2348383865823;
      rLoc[12] = 0.6728175529461; rLoc[13] = 0.2673288599482; rLoc[14] = 0.2348412238268;
      rLoc[15] = 0.0649236350054; rLoc[16] = 0.6716530111494; rLoc[17] = 0.2480251793114;
      rLoc[18] = 0.6716498539042; rLoc[19] = 0.0649251690029; rLoc[20] = 0.2480304922521;
      rLoc[21] = 0.0654032456800; rLoc[22] = 0.2693789366453; rLoc[23] = 0.2518604605529;
      rLoc[24] = 0.2693767069140; rLoc[25] = 0.0654054874919; rLoc[26] = 0.2518660533658;
      rLoc[27] = 0.3386738503896; rLoc[28] = 0.3386799893027; rLoc[29] = 0.4505789381914;
    }
    else if (ord == 4){
      rLoc[0] = 1.0000000000000; rLoc[1] = 0.0000000000000; rLoc[2] = 0.0102558174092;
      rLoc[3] = 0.0000000000000; rLoc[4] = 0.0000000000000; rLoc[5] = 0.0102558174092;
      rLoc[6] = 0.0000000000000; rLoc[7] = 1.0000000000000; rLoc[8] = 0.0102558174092;
      rLoc[9] = 0.7839656651012; rLoc[10] = 0.0421382841642; rLoc[11] = 0.1116047046647;
      rLoc[12] = 0.1738960507345; rLoc[13] = 0.7839656651012; rLoc[14] = 0.1116047046647;
      rLoc[15] = 0.1738960507345; rLoc[16] = 0.0421382841642; rLoc[17] = 0.1116047046647;
      rLoc[18] = 0.0421382841642; rLoc[19] = 0.1738960507345; rLoc[20] = 0.1116047046647;
      rLoc[21] = 0.7839656651012; rLoc[22] = 0.1738960507345; rLoc[23] = 0.1116047046647;
      rLoc[24] = 0.0421382841642; rLoc[25] = 0.7839656651012; rLoc[26] = 0.1116047046647;
      rLoc[27] = 0.4743880861752; rLoc[28] = 0.4743880861752; rLoc[29] = 0.1679775595335;
      rLoc[30] = 0.4743880861752; rLoc[31] = 0.0512238276497; rLoc[32] = 0.1679775595335;
      rLoc[33] = 0.0512238276497; rLoc[34] = 0.4743880861752; rLoc[35] = 0.1679775595335;
      rLoc[36] = 0.2385615300181; rLoc[37] = 0.5228769399639; rLoc[38] = 0.2652238803946;
      rLoc[39] = 0.5228769399639; rLoc[40] = 0.2385615300181; rLoc[41] = 0.2652238803946;
      rLoc[42] = 0.2385615300181; rLoc[43] = 0.2385615300181; rLoc[44] = 0.2652238803946;
    }
    else if (ord == 5){
      rLoc[0] = 0.0451890097844; rLoc[1] = 0.0451890097844; rLoc[2] = 0.0519871420646;
      rLoc[3] = 0.0451890097844; rLoc[4] = 0.9096219804312; rLoc[5] = 0.0519871420646;
      rLoc[6] = 0.9096219804312; rLoc[7] = 0.0451890097844; rLoc[8] = 0.0519871420646;
      rLoc[9] = 0.7475124727339; rLoc[10] = 0.0304243617288; rLoc[11] = 0.0707034101784;
      rLoc[12] = 0.2220631655373; rLoc[13] = 0.0304243617288; rLoc[14] = 0.0707034101784;
      rLoc[15] = 0.7475124727339; rLoc[16] = 0.2220631655373; rLoc[17] = 0.0707034101784;
      rLoc[18] = 0.2220631655373; rLoc[19] = 0.7475124727339; rLoc[20] = 0.0707034101784;
      rLoc[21] = 0.0304243617288; rLoc[22] = 0.7475124727339; rLoc[23] = 0.0707034101784;
      rLoc[24] = 0.0304243617288; rLoc[25] = 0.2220631655373; rLoc[26] = 0.0707034101784;
      rLoc[27] = 0.1369912012649; rLoc[28] = 0.2182900709714; rLoc[29] = 0.0909390760952;
      rLoc[30] = 0.6447187277637; rLoc[31] = 0.2182900709714; rLoc[32] = 0.0909390760952;
      rLoc[33] = 0.1369912012649; rLoc[34] = 0.6447187277637; rLoc[35] = 0.0909390760952;
      rLoc[36] = 0.2182900709714; rLoc[37] = 0.6447187277637; rLoc[38] = 0.0909390760952;
      rLoc[39] = 0.2182900709714; rLoc[40] = 0.1369912012649; rLoc[41] = 0.0909390760952;
      rLoc[42] = 0.6447187277637; rLoc[43] = 0.1369912012649; rLoc[44] = 0.0909390760952;
      rLoc[45] = 0.0369603304334; rLoc[46] = 0.4815198347833; rLoc[47] = 0.1032344051380;
      rLoc[48] = 0.4815198347833; rLoc[49] = 0.0369603304334; rLoc[50] = 0.1032344051380;
      rLoc[51] = 0.4815198347833; rLoc[52] = 0.4815198347833; rLoc[53] = 0.1032344051380;
      rLoc[54] = 0.4036039798179; rLoc[55] = 0.1927920403641; rLoc[56] = 0.1881601469167;
      rLoc[57] = 0.4036039798179; rLoc[58] = 0.4036039798179; rLoc[59] = 0.1881601469167;
      rLoc[60] = 0.1927920403641; rLoc[61] = 0.4036039798179; rLoc[62] = 0.1881601469167;
    }
    else{
      std::cout << "\nPlease choose ord 5 or lower in solutionPoints.C." << std::endl;
      exit(0);
    }

    // transform from barycentric coordinates to the standard equilateral triangle
    double L0,L1;
    int i,k=(ord+2)*(ord+1)/2;
    for (int n=0; n<k; n++){
      i         = n*3;
      L0        = rLoc[i  ];
      L1        = rLoc[i+1];
      rLoc[i  ] = L1-L0;
      rLoc[i+1] =(2.-3.*(L0+L1))/sqrt(3.);
      rLoc[i+2] = rLoc[i+2]*.5*sqrt(3.);
      //std::cout << n << " " << rLoc[i] << " " << rLoc[i+1] << std::endl;
    }
  }

  // Chebychev2 points
  else if (spacing == 2){
    if      (ord == 0){
      rLoc[0] = 0.3333333333333; rLoc[1] = 0.3333333333333; rLoc[2] = 0.;
    }
    else if (ord == 1){
      rLoc[0] =-1.00000000000000; rLoc[1] =-0.57735026918963; rLoc[2] = 0.;
      rLoc[3] = 1.00000000000000; rLoc[4] =-0.57735026918963; rLoc[5] = 0.;
      rLoc[6] = 0.00000000000000; rLoc[7] = 1.15470053837925; rLoc[8] = 0.;
    }
    else if (ord == 2){
      rLoc[0] =-1.00000000000000; rLoc[1] =-0.57735026918963; rLoc[2] = 0.;
      rLoc[3] = 1.00000000000000; rLoc[4] =-0.57735026918963; rLoc[5] = 0.;
      rLoc[6] = 0.00000000000000; rLoc[7] = 1.15470053837925; rLoc[8] = 0.;
      rLoc[9] = 0.00000000000000; rLoc[10] =-0.57735026918963; rLoc[11] = 0.;
      rLoc[12] = 0.50000000000000; rLoc[13] = 0.28867513459481; rLoc[14] = 0.;
      rLoc[15] =-0.50000000000000; rLoc[16] = 0.28867513459481; rLoc[17] = 0.;
    }
    else if (ord == 3){
      rLoc[0] =-1.00000000000000; rLoc[1] =-0.57735026918963; rLoc[2] = 0.;
      rLoc[3] = 1.00000000000000; rLoc[4] =-0.57735026918963; rLoc[5] = 0.;
      rLoc[6] = 0.00000000000000; rLoc[7] = 1.15470053837925; rLoc[8] = 0.;
      rLoc[9] =-0.50000000000000; rLoc[10] =-0.57735026918963; rLoc[11] = 0.;
      rLoc[12] = 0.50000000000000; rLoc[13] =-0.57735026918963; rLoc[14] = 0.;
      rLoc[15] = 0.75000000000000; rLoc[16] =-0.14433756729741; rLoc[17] = 0.;
      rLoc[18] = 0.25000000000000; rLoc[19] = 0.72168783648703; rLoc[20] = 0.;
      rLoc[21] =-0.25000000000000; rLoc[22] = 0.72168783648703; rLoc[23] = 0.;
      rLoc[24] =-0.75000000000000; rLoc[25] =-0.14433756729741; rLoc[26] = 0.;
      rLoc[27] = 0.00000000000000; rLoc[28] = 0.00000000000000; rLoc[29] = 0.;
    }
    else{
      std::cout << "\nPlease choose ord 3 or lower in solutionPoints.C." << std::endl;
      exit(0);
    }
  }


  // else an error
  else{
    cout << "\nPoint spacing not recognized in solutionPoints.C\n";
    exit(0);
  }
}
