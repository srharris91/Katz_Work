#include "Tri2dFCBlockSolver.h"


void Tri2dFCBlockSolver::hessian(const int& nqp,
				 const double* p,
				 double* pxx,
				 double* pxy,
				 double* pyy)
{
  // FEM Hessian
  int k1;
  double jci,xri,yri,xsi,ysi,dx,dy,a;
  //Array1D<double> sumj(nNode);
  Array2D<double> px(nne,nqp),py(nne,nqp);
  //sumj.set(0.);
  for (int n=0; n<nNode*nqp; n++) pxx[n] = 0.;
  for (int n=0; n<nNode*nqp; n++) pxy[n] = 0.;
  for (int n=0; n<nNode*nqp; n++) pyy[n] = 0.;
  for (int n=0; n<nElem; n++){
    px.set(0.);
    py.set(0.);
    for (int i=0; i<nne; i++){
      jci = 1./jac(n,i);
      //xri = xr(n,i)*jci;
      //yri = yr(n,i)*jci;
      //xsi = xs(n,i)*jci;
      //ysi = ys(n,i)*jci;    
      for (int j=0; j<nne; j++){
	//dx = lr(i,j)*ysi-ls(i,j)*yri;
	//dy =-lr(i,j)*xsi+ls(i,j)*xri;
	dx = dxg(n,i,j,0)*jci;
	dy = dxg(n,i,j,1)*jci;
	k1 = elem(n,j)*nqp;
	for (int k=0; k<nqp; k++){
	  px(i,k) += p[k1+k]*dx;
	  py(i,k) += p[k1+k]*dy;
	}}}

    for (int i=0; i<nne; i++){
      k1  = elem(n,i)*nqp;
      //jci = jac(n,i);
      //xri = xr(n,i);
      //yri = yr(n,i);
      //xsi = xs(n,i);
      //ysi = ys(n,i);
      for (int j=0; j<nne; j++){
	//dx = lr(i,j)*ysi-ls(i,j)*yri;
	//dy =-lr(i,j)*xsi+ls(i,j)*xri;
	dx = dxg(n,i,j,0);
	dy = dxg(n,i,j,1);
	for (int k=0; k<nqp; k++){
	  pxx[k1+k] += px(j,k)*dx;
	  pxy[k1+k] += px(j,k)*dy;
	  pyy[k1+k] += py(j,k)*dy;
	}}
      //sumj(elem(n,i)) += jci;
    }}
  for (int n=0; n<nNode; n++){ //normalize Hessian
    //a  = 1./sumj(n);
    a  = sumj(n);
    k1 = n*nqp;
    for (int k=0; k<nqp; k++){
      pxx[k1+k] *= a;
      pxy[k1+k] *= a;
      pyy[k1+k] *= a;
    }}
  px.deallocate();
  py.deallocate();
  //sumj.deallocate();
}
