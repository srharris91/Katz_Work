#include "Strand2dFCBlockSolver.h"


void Strand2dFCBlockSolver::fdCoeffViscous()
{
  if (strandOrder == 1 || strandOrder == 2){ // D_2^(2,1,2)
    // dimensions
    int nBnd=3,nMax=4;
    if (nStrandNode < 2*nBnd){
      cout << "\nPlease choose nStrandNode greater than "
	   << 2*nBnd << "." << endl;
      exit(0);
    }

    vcn2 = new int*[nStrandNode];
    for (int j=0; j<nStrandNode; j++) vcn2[j] = new int[2];

    for (int j=0; j<nBnd; j++){ //root stencils
      vcn2[j][0] = 0;
      vcn2[j][1] = nMax;
    }

    for (int j=nBnd; j<nStrandNode-nBnd; j++){ //interior stencils
      vcn2[j][0] = j-1;
      vcn2[j][1] = 3;
    }

    int i=nBnd-1,j1,nj,l;
    for (int j=nStrandNode-nBnd; j<nStrandNode; j++){ //tip stencils
      j1         = vcn2[i  ][0];
      nj         = vcn2[i--][1];
      vcn2[j][0] = nStrandNode-(j1+nj);
      vcn2[j][1] = nj;
    }

    vcn3 = new int**[nStrandNode];
    for (int j=0; j<nStrandNode; j++){
      nj      = vcn2[j][1];
      vcn3[j] = new int*[nj];
      for (int m=0; m<nj; m++) vcn3[j][m] = new int[2];
    }

    for (int j=0; j<nBnd; j++){ //root stencils
      nj = vcn2[j][1];
      for (int m=0; m<nj; m++){
	vcn3[j][m][0] = 0;
	vcn3[j][m][1] = nMax;
      }}

    for (int j=nBnd; j<nStrandNode-nBnd; j++){ //interior stencils
      vcn3[j][0][0] = j-1;
      vcn3[j][0][1] = 2;
      vcn3[j][1][0] = j-1;
      vcn3[j][1][1] = 3;
      vcn3[j][2][0] = j;
      vcn3[j][2][1] = 2;
    }

    int k,l1,nl;
    i = nBnd-1;
    for (int j=nStrandNode-nBnd; j<nStrandNode; j++){ //tip stencils
      j1 = vcn2[i][0];
      nj = vcn2[i][1];
      k  = nj-1;
      for (int m=0; m<nj; m++){
	l1            = vcn3[i][k  ][0];
	nl            = vcn3[i][k--][1];
	vcn3[j][m][0] = nStrandNode-(l1+nl);
	vcn3[j][m][1] = nl;
      }
      i--;
    }

    // coefficients
    vcn1 = new double**[nStrandNode];
    for (int j=0; j<nStrandNode; j++){
      nj      = vcn2[j][1];
      vcn1[j] = new double*[nj];
      for (int m=0; m<nj; m++){
	nl         = vcn3[j][m][1];
	vcn1[j][m] = new double[nl];
	for (int l=0; l<nl; l++) vcn1[j][m][l] = 0.;
      }}

    //M11
    vcn1[0][0][0] =-.5;
    vcn1[0][0][1] =-.5;

    //M12
    vcn1[0][1][0] = .5;
    vcn1[0][1][1] = .5;


    //M21
    vcn1[1][0][0] = .5;
    vcn1[1][0][1] = .5;

    //M22
    vcn1[1][1][0] =-.5;
    vcn1[1][1][1] =-1.;
    vcn1[1][1][2] =-.5;

    //M23
    vcn1[1][2][1] = .5;
    vcn1[1][2][2] = .5;


    //M32
    vcn1[2][1][1] = .5;
    vcn1[2][1][2] = .5;

    //M33
    vcn1[2][2][1] =-.5;
    vcn1[2][2][2] =-1.;
    vcn1[2][2][3] =-.5;

    //M34
    vcn1[2][3][2] = .5;
    vcn1[2][3][3] = .5;

    //M is symmetric
    for (int j=0; j<nBnd; j++)
      for (int m=0; m<j; m++)
	for (int l=0; l<nMax; l++) vcn1[j][m][l] = vcn1[m][j][l];

    // add in boundary term to first row
    nBndVis = 3;
    vcn4 = new double[nBndVis];
    vcn4[0] =-1.5;
    vcn4[1] = 2.;
    vcn4[2] =-.5;
    vcn1[0][0][0] -= vcn4[0];
    vcn1[0][1][0] -= vcn4[1];
    vcn1[0][2][0] -= vcn4[2];

    // multiply boundary rows by H^{-1}
    Array1D<double> norm(nBnd);
    norm(0) = 2.;
    norm(1) = 1.;
    norm(2) = 1.;
    for (int j=0; j<nBnd; j++){
      nj = vcn2[j][1];
      for (int m=0; m<nj; m++){
	nl = vcn3[j][m][1];
	for (int l=0; l<nl; l++) vcn1[j][m][l] *= norm(j);
      }}
    norm.deallocate();

    for (int j=nBnd; j<nStrandNode-nBnd; j++){ //interior coefficients
      vcn1[j][0][0] = .5;
      vcn1[j][0][1] = .5;
      
      vcn1[j][1][0] =-.5;
      vcn1[j][1][1] =-1.;
      vcn1[j][1][2] =-.5;
      
      vcn1[j][2][0] = .5;
      vcn1[j][2][1] = .5;
    }

    int p;
    i = nBnd-1;
    for (int j=nStrandNode-nBnd; j<nStrandNode; j++){ //tip coefficients
      j1 = vcn2[i][0];
      nj = vcn2[i][1];
      k  = nj-1;
      for (int m=0; m<nj; m++){
	l1 = vcn3[i][k][0];
	nl = vcn3[i][k][1];
	p  = nl-1;
	for (int l=0; l<nl; l++) vcn1[j][m][l] = vcn1[i][k][p--];
	k--;
      }
      i--;
    }
  }


  else if (strandOrder == 3){ // D_2^(4,2,4)
    // dimensions
    int nBnd=6,nMax=8;
    if (nStrandNode < 2*nBnd){
      cout << "\nPlease choose nStrandNode greater than "
	   << 2*nBnd << "." << endl;
      exit(0);
    }

    vcn2 = new int*[nStrandNode];
    for (int j=0; j<nStrandNode; j++) vcn2[j] = new int[2];

    for (int j=0; j<nBnd; j++){ //root stencils
      vcn2[j][0] = 0;
      vcn2[j][1] = nMax;
    }

    for (int j=nBnd; j<nStrandNode-nBnd; j++){ //interior stencils
      vcn2[j][0] = j-2;
      vcn2[j][1] = 5;
    }

    int i=nBnd-1,j1,nj,l;
    for (int j=nStrandNode-nBnd; j<nStrandNode; j++){ //tip stencils
      j1         = vcn2[i  ][0];
      nj         = vcn2[i--][1];
      vcn2[j][0] = nStrandNode-(j1+nj);
      vcn2[j][1] = nj;
    }

    vcn3 = new int**[nStrandNode];
    for (int j=0; j<nStrandNode; j++){
      nj      = vcn2[j][1];
      vcn3[j] = new int*[nj];
      for (int m=0; m<nj; m++) vcn3[j][m] = new int[2];
    }

    for (int j=0; j<nBnd; j++){ //root stencils
      nj = vcn2[j][1];
      for (int m=0; m<nj; m++){
	vcn3[j][m][0] = 0;
	vcn3[j][m][1] = nMax;
      }}

    for (int j=nBnd; j<nStrandNode-nBnd; j++){ //interior stencils
      vcn3[j][0][0] = j-2;
      vcn3[j][0][1] = 3;
      vcn3[j][1][0] = j-2;
      vcn3[j][1][1] = 4;
      vcn3[j][2][0] = j-2;
      vcn3[j][2][1] = 5;
      vcn3[j][3][0] = j-1;
      vcn3[j][3][1] = 4;
      vcn3[j][4][0] = j;
      vcn3[j][4][1] = 3;
    }

    int k,l1,nl;
    i = nBnd-1;
    for (int j=nStrandNode-nBnd; j<nStrandNode; j++){ //tip stencils
      j1 = vcn2[i][0];
      nj = vcn2[i][1];
      k  = nj-1;
      for (int m=0; m<nj; m++){
	l1            = vcn3[i][k  ][0];
	nl            = vcn3[i][k--][1];
	vcn3[j][m][0] = nStrandNode-(l1+nl);
	vcn3[j][m][1] = nl;
      }
      i--;
    }

    // coefficients
    vcn1 = new double**[nStrandNode];
    for (int j=0; j<nStrandNode; j++){
      nj      = vcn2[j][1];
      vcn1[j] = new double*[nj];
      for (int m=0; m<nj; m++){
	nl         = vcn3[j][m][1];
	vcn1[j][m] = new double[nl];
	for (int l=0; l<nl; l++) vcn1[j][m][l] = 0.;
      }}


    //M11
    vcn1[0][0][0] =-12./17.;
    vcn1[0][0][1] =-59./192.;
    vcn1[0][0][2] =-27010400129./345067064608.;
    vcn1[0][0][3] =-69462376031./2070402387648.;

    //M12
    vcn1[0][1][0] = 59./68.;
    vcn1[0][1][2] = 6025413881./21126554976.;
    vcn1[0][1][3] = 537416663./7042184992.;

    //M13
    vcn1[0][2][0] =-2./17.;
    vcn1[0][2][1] = 59./192.;
    vcn1[0][2][2] =-2083938599./8024815456.;
    vcn1[0][2][3] =-213318005./16049630912.;

    //M14
    vcn1[0][3][0] =-3./68.;
    vcn1[0][3][2] = 1244724001./21126554976.;
    vcn1[0][3][3] =-752806667./21126554976.;

    //M15
    vcn1[0][4][2] =-49579087./10149031312.;
    vcn1[0][4][3] = 49579087./10149031312.;

    //M16
    vcn1[0][5][2] =-1./784.;
    vcn1[0][5][3] = 1./784.;


    //M22
    vcn1[1][1][0] =-3481./3264.;
    vcn1[1][1][2] =-9258282831623875./7669235228057664.;
    vcn1[1][1][3] =-236024329996203./1278205871342944.;

    //M23
    vcn1[1][2][0] = 59./408.;
    vcn1[1][2][2] = 29294615794607./29725717938208.;
    vcn1[1][2][3] = 2944673881023./29725717938208.;

    //M24
    vcn1[1][3][0] = 59./1088.;
    vcn1[1][3][2] =-260297319232891./2556411742685888.;
    vcn1[1][3][3] = 60834186813841./1278205871342944.;

    //M25
    vcn1[1][4][2] = 1328188692663./37594290333616.;
    vcn1[1][4][3] =-1328188692663./37594290333616.;

    //M26
    vcn1[1][5][2] = 8673./2904112.;
    vcn1[1][5][3] =-8673./2904112.;


    //M33
    vcn1[2][2][0] =-1./51.;
    vcn1[2][2][1] =-59./192.;
    vcn1[2][2][2] =-378288882302546512209./270764341349677687456.;
    vcn1[2][2][3] =-13777050223300597./26218083221499456.;
    vcn1[2][2][4] =-564461./13384296;

    //M34
    vcn1[2][3][0] =-1./136.;
    vcn1[2][3][2] = 4836340090442187227./5525802884687299744.;
    vcn1[2][3][3] = 17220493277981./89177153814624.;
    vcn1[2][3][4] = 125059./743572;

    //M35
    vcn1[2][4][2] =-1613976761032884305./7963657098519931984.;
    vcn1[2][4][3] = 10532412077335./42840005263888.;
    vcn1[2][4][4] =-564461./4461432.;

    //M36
    vcn1[2][5][2] =-33235054191./26452850508784.;
    vcn1[2][5][3] = 960119./1280713392.;
    vcn1[2][5][4] = 3391./6692148.;


    //M44
    vcn1[3][3][0] =-3./1088.;
    vcn1[3][3][2] =-507284006600757858213./475219048083107777984.;
    vcn1[3][3][3] =-1950062198436997./3834617614028832.;
    vcn1[3][3][4] =-1869103./2230716.;
    vcn1[3][3][5] =-1./24.;

    //M45
    vcn1[3][4][2] = 4959271814984644613./20965546238960637264.;
    vcn1[3][4][3] = 15998714909649./37594290333616.;
    vcn1[3][4][4] = 375177./743572.;
    vcn1[3][4][5] = 1./6.;

    //M46
    vcn1[3][5][2] =-752806667./539854092016.;
    vcn1[3][5][3] =-1063649./8712336.;
    vcn1[3][5][4] = 368395./2230716.;
    vcn1[3][5][5] =-1./8.;


    //M55
    vcn1[4][4][2] =-8386761355510099813./128413970713633903242.;
    vcn1[4][4][3] =-2224717261773437./2763180339520776.;
    vcn1[4][4][4] =-280535./371786.;
    vcn1[4][4][5] =-5./6.;
    vcn1[4][4][6] =-1./24.;

    //M56
    vcn1[4][5][2] = 13091810925./13226425254392.;
    vcn1[4][5][3] = 35039615./213452232.;
    vcn1[4][5][4] = 1118749./2230716.;
    vcn1[4][5][5] = 1./2.;
    vcn1[4][5][6] = 1./6.;

    //M57
    vcn1[4][6][4] =-1./8.;
    vcn1[4][6][5] = 1./6.;
    vcn1[4][6][6] =-1./8.;


    //M66
    vcn1[5][5][2] =-660204843./13226425254392.;
    vcn1[5][5][3] =-3290636./80044587.;
    vcn1[5][5][4] =-5580181./6692148.;
    vcn1[5][5][5] =-3./4.;
    vcn1[5][5][6] =-5./6.;
    vcn1[5][5][7] =-1./24.;

    //M67
    vcn1[5][6][4] = 1./6.;
    vcn1[5][6][5] = 1./2.;
    vcn1[5][6][6] = 1./2.;
    vcn1[5][6][7] = 1./6.;

    //M68
    vcn1[5][7][5] =-1./8.;
    vcn1[5][7][6] = 1./6.;
    vcn1[5][7][7] =-1./8.;

    //M is symmetric
    for (int j=0; j<nBnd; j++)
      for (int m=0; m<j; m++)
	for (int l=0; l<nMax; l++) vcn1[j][m][l] = vcn1[m][j][l];

    // add in boundary term to first row
    nBndVis = 4;
    vcn4 = new double[nBndVis];
    vcn4[0] =-11./6.;
    vcn4[1] = 3.;
    vcn4[2] =-1.5;
    vcn4[3] = 1./3.;
    vcn1[0][0][0] -= vcn4[0];
    vcn1[0][1][0] -= vcn4[1];
    vcn1[0][2][0] -= vcn4[2];
    vcn1[0][3][0] -= vcn4[3];


    // multiply boundary rows by H^{-1}
    Array1D<double> norm(nBnd);
    norm(0) = 48./17.;
    norm(1) = 48./59.;
    norm(2) = 48./43.;
    norm(3) = 48./49.;
    norm(4) = 1.;
    norm(5) = 1.;
    for (int j=0; j<nBnd; j++){
      nj = vcn2[j][1];
      for (int m=0; m<nj; m++){
	nl = vcn3[j][m][1];
	for (int l=0; l<nl; l++) vcn1[j][m][l] *= norm(j);
      }}
    norm.deallocate();

    for (int j=nBnd; j<nStrandNode-nBnd; j++){ //interior coefficients
      vcn1[j][0][0] =-1./8.;
      vcn1[j][0][1] = 1./6.;
      vcn1[j][0][2] =-1./8.;
      
      vcn1[j][1][0] = 1./6.;
      vcn1[j][1][1] = 1./2.;
      vcn1[j][1][2] = 1./2.;
      vcn1[j][1][3] = 1./6.;

      vcn1[j][2][0] =-1./24.;
      vcn1[j][2][1] =-5./6.;
      vcn1[j][2][2] =-3./4.;
      vcn1[j][2][3] =-5./6.;
      vcn1[j][2][4] =-1./24.;
      
      vcn1[j][3][0] = 1./6.;
      vcn1[j][3][1] = 1./2.;
      vcn1[j][3][2] = 1./2.;
      vcn1[j][3][3] = 1./6.;

      vcn1[j][4][0] =-1./8.;
      vcn1[j][4][1] = 1./6.;
      vcn1[j][4][2] =-1./8.;
    }

    int p;
    i = nBnd-1;
    for (int j=nStrandNode-nBnd; j<nStrandNode; j++){ //tip coefficients
      j1 = vcn2[i][0];
      nj = vcn2[i][1];
      k  = nj-1;
      for (int m=0; m<nj; m++){
	l1 = vcn3[i][k][0];
	nl = vcn3[i][k][1];
	p  = nl-1;
	for (int l=0; l<nl; l++) vcn1[j][m][l] = vcn1[i][k][p--];
	k--;
      }
      i--;
    }
  }


  else if (strandOrder == 4){ // D_2^(6,3,5)
    // dimensions
    int nBnd=9,nMax=12;
    if (nStrandNode < 2*nBnd){
      cout << "\nPlease choose nStrandNode greater than "
	   << 2*nBnd << "." << endl;
      exit(0);
    }

    vcn2 = new int*[nStrandNode];
    for (int j=0; j<nStrandNode; j++) vcn2[j] = new int[2];

    for (int j=0; j<nBnd; j++){ //root stencils
      vcn2[j][0] = 0;
      vcn2[j][1] = nMax;
    }

    for (int j=nBnd; j<nStrandNode-nBnd; j++){ //interior stencils
      vcn2[j][0] = j-3;
      vcn2[j][1] = 7;
    }

    int i=nBnd-1,j1,nj,l;
    for (int j=nStrandNode-nBnd; j<nStrandNode; j++){ //tip stencils
      j1         = vcn2[i  ][0];
      nj         = vcn2[i--][1];
      vcn2[j][0] = nStrandNode-(j1+nj);
      vcn2[j][1] = nj;
    }

    vcn3 = new int**[nStrandNode];
    for (int j=0; j<nStrandNode; j++){
      nj      = vcn2[j][1];
      vcn3[j] = new int*[nj];
      for (int m=0; m<nj; m++) vcn3[j][m] = new int[2];
    }

    for (int j=0; j<nBnd; j++){ //root stencils
      nj = vcn2[j][1];
      for (int m=0; m<nj; m++){
	vcn3[j][m][0] = 0;
	vcn3[j][m][1] = nMax;
      }}

    for (int j=nBnd; j<nStrandNode-nBnd; j++){ //interior stencils
      vcn3[j][0][0] = j-3;
      vcn3[j][0][1] = 4;
      vcn3[j][1][0] = j-3;
      vcn3[j][1][1] = 5;
      vcn3[j][2][0] = j-3;
      vcn3[j][2][1] = 6;
      vcn3[j][3][0] = j-3;
      vcn3[j][3][1] = 7;
      vcn3[j][4][0] = j-2;
      vcn3[j][4][1] = 6;
      vcn3[j][5][0] = j-1;
      vcn3[j][5][1] = 5;
      vcn3[j][6][0] = j;
      vcn3[j][6][1] = 4;
    }

    int k,l1,nl;
    i = nBnd-1;
    for (int j=nStrandNode-nBnd; j<nStrandNode; j++){ //tip stencils
      j1 = vcn2[i][0];
      nj = vcn2[i][1];
      k  = nj-1;
      for (int m=0; m<nj; m++){
	l1            = vcn3[i][k  ][0];
	nl            = vcn3[i][k--][1];
	vcn3[j][m][0] = nStrandNode-(l1+nl);
	vcn3[j][m][1] = nl;
      }
      i--;
    }

    // coefficients
    vcn1 = new double**[nStrandNode];
    for (int j=0; j<nStrandNode; j++){
      nj      = vcn2[j][1];
      vcn1[j] = new double*[nj];
      for (int m=0; m<nj; m++){
	nl         = vcn3[j][m][1];
	vcn1[j][m] = new double[nl];
	for (int l=0; l<nl; l++) vcn1[j][m][l] = 0.;
      }}

    //M11
    vcn1[0][0][0] =-0.79126675946955820939;
    vcn1[0][0][1] =-0.29684720906380007429;
    vcn1[0][0][2] =-0.0031855190887964290152;
    vcn1[0][0][3] =-0.016324040425909519534;
    vcn1[0][0][4] =-0.031603022440944150877;
    vcn1[0][0][5] =-0.031679647480161052996;
    vcn1[0][0][6] =-0.031485777339472539205;

    //M12
    vcn1[0][1][0] = 1.0166893393503381444;
    vcn1[0][1][2] = 0.028456273704916113690;
    vcn1[0][1][3] = 0.041280298383492988198;
    vcn1[0][1][4] = 0.13922814516201405075;
    vcn1[0][1][5] = 0.11957773256112017666;
    vcn1[0][1][6] = 0.11942677565293334109;

    //M13
    vcn1[0][2][0] =-0.070756429372437150463;
    vcn1[0][2][1] = 0.18454761060241510503;
    vcn1[0][2][3] = 0.043641631471118923470;
    vcn1[0][2][4] =-0.24323679072077324609;
    vcn1[0][2][5] =-0.15821270735372154440;
    vcn1[0][2][6] =-0.16023485783647863076;

    //M14
    vcn1[0][3][0] =-0.22519915328913532127;
    vcn1[0][3][1] = 0.16627487110970548953;
    vcn1[0][3][2] =-0.027105309616486712977;
    vcn1[0][3][4] = 0.19166461859684399091;
    vcn1[0][3][5] = 0.076841171601990145944;
    vcn1[0][3][6] = 0.082195869498316975759;

    //M15
    vcn1[0][4][0] = 0.052244034642020563167;
    vcn1[0][4][1] =-0.044400639485098762210;
    vcn1[0][4][2] = 0.0010239765473093878745;
    vcn1[0][4][3] =-0.074034846453161740905;
    vcn1[0][4][4] =-0.071886528478926012827;
    vcn1[0][4][5] =-0.012416255689984968954;
    vcn1[0][4][6] =-0.013793629971047355034;

    //M16
    vcn1[0][5][0] = 0.018288968138771973527;
    vcn1[0][5][1] =-0.0095746331632217580607;
    vcn1[0][5][2] = 0.00081057845305764042779;
    vcn1[0][5][3] = 0.0073488455877755196984;
    vcn1[0][5][4] =-0.010636019497239069970;
    vcn1[0][5][5] = 0.013159670383826183824;
    vcn1[0][5][6] = 0.021179364788387535246;

    //M17
    vcn1[0][6][3] =-0.0019118885633161709274;
    vcn1[0][6][4] = 0.040681303555291499361;
    vcn1[0][6][5] =-0.013196749810737491670;
    vcn1[0][6][6] =-0.025572665181237836763;

    //M18
    vcn1[0][7][4] =-0.015596528711367857640;
    vcn1[0][7][5] = 0.0064861841573315378995;
    vcn1[0][7][6] = 0.0091103445540363197401;

    //M19
    vcn1[0][8][4] = 0.0013848225351007963723;
    vcn1[0][8][5] =-0.00055939836966298630593;
    vcn1[0][8][6] =-0.00082542416543781006633;


    //M22
    vcn1[1][1][0] =-1.3063321571116676286;
    vcn1[1][1][2] =-0.25420017604573457435;
    vcn1[1][1][3] =-0.10438978280925626095;
    vcn1[1][1][4] =-0.66723280210321129509;
    vcn1[1][1][5] =-0.46818193597227494411;
    vcn1[1][1][6] =-0.46764154101958369201;

    //M23
    vcn1[1][2][0] = 0.090914102699924646049;
    vcn1[1][2][3] =-0.11036113131714764253;
    vcn1[1][2][4] = 1.2903975449975188870;
    vcn1[1][2][5] = 0.66396052487350447871;
    vcn1[1][2][6] = 0.66159744640052061842;

    //M24
    vcn1[1][3][0] = 0.28935573956534316666;
    vcn1[1][3][2] = 0.24213200040645927216;
    vcn1[1][3][4] =-1.1876702550280310277;
    vcn1[1][3][5] =-0.39565981499041363328;
    vcn1[1][3][6] =-0.38600489217558000007;

    //M25
    vcn1[1][4][0] =-0.067127744758037639890;
    vcn1[1][4][2] =-0.0091471926820756301800;
    vcn1[1][4][3] = 0.18721961430038080217;
    vcn1[1][4][4] = 0.48715757368119118874;
    vcn1[1][4][5] = 0.13193585588531745301;
    vcn1[1][4][6] = 0.10475163122754481381;

    //M26
    vcn1[1][5][0] =-0.023499279745900688694;
    vcn1[1][5][2] =-0.0072409053835651813164;
    vcn1[1][5][3] =-0.018583789963916794487;
    vcn1[1][5][4] = 0.092896161339386761743;
    vcn1[1][5][5] =-0.12235132704188076670;
    vcn1[1][5][6] =-0.11135203204362950339;

    //M27
    vcn1[1][6][3] = 0.0048347914064469075906;
    vcn1[1][6][4] =-0.23106838326878204031;
    vcn1[1][6][5] = 0.10807741421960079917;
    vcn1[1][6][6] = 0.11815617764273433354;

    //M28
    vcn1[1][7][4] = 0.083681414344034553537;
    vcn1[1][7][5] =-0.040934994667670546616;
    vcn1[1][7][6] =-0.042746419676364006921;

    //M29
    vcn1[1][8][4] =-0.0073893991241210786821;
    vcn1[1][8][5] = 0.0035765451326969831434;
    vcn1[1][8][6] = 0.0038128539914240955387;


    //M33
    vcn1[2][2][0] =-0.0063271611471368738078;
    vcn1[2][2][1] =-0.11473182007158685275;
    vcn1[2][2][3] =-0.11667405542796800075;
    vcn1[2][2][4] =-2.7666108082854440372;
    vcn1[2][2][5] =-1.0709206899608171042;
    vcn1[2][2][6] =-1.0131613910329730572;

    //M34
    vcn1[2][3][0] =-0.020137694138847972466;
    vcn1[2][3][1] =-0.10337179946308864017;
    vcn1[2][3][4] = 2.9132216211517427243;
    vcn1[2][3][5] = 0.87558073434822622598;
    vcn1[2][3][6] = 0.69099571834888124265;

    //M35
    vcn1[2][4][0] = 0.0046717510915754628683;
    vcn1[2][4][1] = 0.027603533656377128278;
    vcn1[2][4][3] = 0.19792902986208699745;
    vcn1[2][4][4] =-1.2391775930319110779;
    vcn1[2][4][5] =-0.54029853383734330523;
    vcn1[2][4][6] =-0.26280380502473582273;

    //M36
    vcn1[2][5][0] = 0.0016354308669218878195;
    vcn1[2][5][1] = 0.0059524752758832596197;
    vcn1[2][5][3] =-0.019646827777442752194;
    vcn1[2][5][4] =-0.32366400126390466006;
    vcn1[2][5][5] = 0.46595166932288709739;
    vcn1[2][5][6] = 0.22172727209417368594;

    //M37
    vcn1[2][6][3] = 0.0051113531893524745496;
    vcn1[2][6][4] = 0.53558781637747543460;
    vcn1[2][6][5] =-0.33283351044897389336;
    vcn1[2][6][6] =-0.20786565911785401579;

    //M38
    vcn1[2][7][4] =-0.18243281741342895622;
    vcn1[2][7][5] = 0.10598160301968184459;
    vcn1[2][7][6] = 0.076451214393747111630;

    //M39
    vcn1[2][8][4] = 0.015915028188724931671;
    vcn1[2][8][5] =-0.0092090899634437994856;
    vcn1[2][8][6] =-0.0067059382252811321853;


    //M44
    vcn1[3][3][0] =-0.064092997759871869867;
    vcn1[3][3][1] =-0.093136576388046999489;
    vcn1[3][3][2] =-0.23063676246347492291;
    vcn1[3][3][4] =-3.6894403082837166203;
    vcn1[3][3][5] =-1.1905503386876088738;
    vcn1[3][3][6] =-0.59124795468888565194;

    //M45
    vcn1[3][4][0] = 0.014868958192656041286;
    vcn1[3][4][1] = 0.024870405993901607642;
    vcn1[3][4][2] = 0.0087129289077117541871;
    vcn1[3][4][4] = 1.4706919260458029548;
    vcn1[3][4][5] = 1.2635078373718242057;
    vcn1[3][4][6] = 0.30583173978439973269;

    //M46
    vcn1[3][5][0] = 0.0052051474298559556576;
    vcn1[3][5][1] = 0.0053630987475285424890;
    vcn1[3][5][2] = 0.0068971427657906095463;
    vcn1[3][5][4] = 0.78575245216674501017;
    vcn1[3][5][5] =-0.99770643562927505292;
    vcn1[3][5][6] =-0.22911480054237346001;

    //M47
    vcn1[3][6][4] =-0.66972974880676622652;
    vcn1[3][6][5] = 0.50132473560721279390;
    vcn1[3][6][6] = 0.17951612431066454373;

    //M48
    vcn1[3][7][4] = 0.20229090601117515652;
    vcn1[3][7][5] =-0.14534218580636584986;
    vcn1[3][7][6] =-0.056948720204809306656;

    //M49
    vcn1[3][8][4] =-0.016781211853795962179;
    vcn1[3][8][5] = 0.012004296184410038337;
    vcn1[3][8][6] = 0.0047769156693859238415;


    //M55
    vcn1[4][4][0] =-0.0034494550959102336252;
    vcn1[4][4][1] =-0.0066411834994278261016;
    vcn1[4][4][2] =-0.00032915450832718628585;
    vcn1[4][4][3] =-0.33577217075764772000;
    vcn1[4][4][4] =-0.71091258506833766956;
    vcn1[4][4][5] =-2.0964133295790264390;
    vcn1[4][4][6] =-0.23173232041831268550;
    vcn1[4][4][7] =-0.0061078257643682645765;

    //M56
    vcn1[4][5][0] =-0.0012075440723041938061;
    vcn1[4][5][1] =-0.0014321166657521476075;
    vcn1[4][5][2] =-0.00026055826461832559573;
    vcn1[4][5][3] = 0.033329411132516353908;
    vcn1[4][5][4] =-0.10458654356829219874;
    vcn1[4][5][5] = 1.3484369866671155432;
    vcn1[4][5][6] = 0.28082416973855326836;
    vcn1[4][5][7] = 0.027209080835250836084;

    //M57
    vcn1[4][6][3] =-0.0086710380841746926251;
    vcn1[4][6][4] = 0.24249352624045263018;
    vcn1[4][6][5] =-0.17360734113554285637;
    vcn1[4][6][6] =-0.15690152576785882706;
    vcn1[4][6][7] =-0.053313621252876254126;

    //M58
    vcn1[4][7][4] =-0.080981941477156510853;
    vcn1[4][7][5] = 0.086316839802171222760;
    vcn1[4][7][6] =-0.026988423604709992435;
    vcn1[4][7][7] = 0.032764636390806391639;

    //M59
    vcn1[4][8][4] = 0.0072021656571766961993;
    vcn1[4][8][5] =-0.0074620594845308550733;
    vcn1[4][8][6] = 0.00081216403616686789496;
    vcn1[4][8][7] =-0.00055227020881270902093;


    //M66
    vcn1[5][5][0] =-0.00042272261734493450425;
    vcn1[5][5][1] =-0.00030882419443789644048;
    vcn1[5][5][2] =-0.00020625757066474306202;
    vcn1[5][5][3] =-0.0033083434042009682567;
    vcn1[5][5][4] =-0.58280470164050018158;
    vcn1[5][5][5] =-1.1903620718618930511;
    vcn1[5][5][6] =-0.80541742203662154736;
    vcn1[5][5][7] =-0.13383632334100334433;
    vcn1[5][5][8] =-0.0055555555555555555556;

    //M67
    vcn1[5][6][3] = 0.00086070442526864133026;
    vcn1[5][6][4] = 0.17480747086739049893;
    vcn1[5][6][5] = 0.66916070916479291611;
    vcn1[5][6][6] = 0.31691663053104292713;
    vcn1[5][6][7] = 0.31325448501150501650;
    vcn1[5][6][8] = 0.025000000000000000000;

    //M68
    vcn1[5][7][4] =-0.033546617916933521087;
    vcn1[5][7][5] =-0.21697906098076027508;
    vcn1[5][7][6] = 0.33436200223869714050;
    vcn1[5][7][7] =-0.18383632334100334433;
    vcn1[5][7][8] =-0.050000000000000000000;

    //M69
    vcn1[5][8][4] = 0.0017817995133473605962;
    vcn1[5][8][5] = 0.030689859975187405305;
    vcn1[5][8][6] =-0.029125184768230046430;
    vcn1[5][8][7] =-0.022790919164749163916;
    vcn1[5][8][8] = 0.030555555555555555556;

    //M77
    vcn1[6][6][3] =-0.00022392237357715991790;
    vcn1[6][6][4] =-0.12754377854309566738;
    vcn1[6][6][5] =-1.0116994839296081646;
    vcn1[6][6][6] =-0.48231775430312815001;
    vcn1[6][6][7] =-0.96988172751725752475;
    vcn1[6][6][8] =-0.12500000000000000000;
    vcn1[6][6][9] =-0.0055555555555555555556;

    //M78
    vcn1[6][7][4] = 0.037841139730330129499;
    vcn1[6][7][5] = 0.29975568851348273616;
    vcn1[6][7][6] = 0.39914868674468211784;
    vcn1[6][7][7] = 0.43825448501150501650;
    vcn1[6][7][8] = 0.30000000000000000000;
    vcn1[6][7][9] = 0.025000000000000000000;

    //M79
    vcn1[6][8][4] =-0.0030693461522962583624;
    vcn1[6][8][5] =-0.046981462180226839339;
    vcn1[6][8][6] =-0.17163557041460064817;
    vcn1[6][8][7] = 0.29668637874712374587;
    vcn1[6][8][8] =-0.17500000000000000000;
    vcn1[6][8][9] =-0.050000000000000000000;

    //M710
    vcn1[6][9][6] = 11./360.;
    vcn1[6][9][7] =-1./40.;
    vcn1[6][9][8] =-1./40.;
    vcn1[6][9][9] = 11./360.;

    //M88
    vcn1[7][7][4] =-0.012303289427168044554;
    vcn1[7][7][5] =-0.11836475296458983325;
    vcn1[7][7][6] =-0.94105118982279433342;
    vcn1[7][7][7] =-0.56994743445211445545;
    vcn1[7][7][8] =-0.95000000000000000000;
    vcn1[7][7][9] =-0.12500000000000000000;
    vcn1[7][7][10] =-0.0055555555555555555556;

    //M89
    vcn1[7][8][4] = 0.0010477348605150508026;
    vcn1[7][8][5] = 0.023080678926719163396;
    vcn1[7][8][6] = 0.29866250537751494972;
    vcn1[7][8][7] = 0.42720908083525083608;
    vcn1[7][8][8] = 0.42500000000000000000;
    vcn1[7][8][9] = 0.30000000000000000000;
    vcn1[7][8][10] = 0.025000000000000000000;

    //M810
    vcn1[7][9][6] =-1./20.;
    vcn1[7][9][7] =-7./40.;
    vcn1[7][9][8] = 3./10.;
    vcn1[7][9][9] =-7./40.;
    vcn1[7][9][10] =-1./20.;

    //M811
    vcn1[7][10][7] = 11./360.;
    vcn1[7][10][8] =-1./40.;
    vcn1[7][10][9] =-1./40.;
    vcn1[7][10][10] = 11./360.;

    //M99
    vcn1[8][8][4] =-0.000091593624651536418269;
    vcn1[8][8][5] =-0.0051393702211491099770;
    vcn1[8][8][6] =-0.12477232150094220014;
    vcn1[8][8][7] =-0.95055227020881270902;
    vcn1[8][8][8] =-0.56111111111111111111;
    vcn1[8][8][9] =-0.95000000000000000000;
    vcn1[8][8][10] =-0.12500000000000000000;
    vcn1[8][8][11] =-0.0055555555555555555556;

    //M910
    vcn1[8][9][6] = 1./40.;
    vcn1[8][9][7] = 3./10.;
    vcn1[8][9][8] = 17./40.;
    vcn1[8][9][9] = 17./40.;
    vcn1[8][9][10] = 3./10.;
    vcn1[8][9][11] = 1./40.;

    //M911
    vcn1[8][10][7] =-1./20.;
    vcn1[8][10][8] =-7./40.;
    vcn1[8][10][9] = 3./10.;
    vcn1[8][10][10] =-7./40.;
    vcn1[8][10][11] =-1./20.;

    //M912
    vcn1[8][11][8] = 11./360.;
    vcn1[8][11][9] =-1./40.;
    vcn1[8][11][10] =-1./40.;
    vcn1[8][11][11] = 11./360.;

    //M is symmetric
    for (int j=0; j<nBnd; j++)
      for (int m=0; m<j; m++)
	for (int l=0; l<nMax; l++) vcn1[j][m][l] = vcn1[m][j][l];

    // add in boundary term to first row
    nBndVis = 5;
    vcn4 = new double[nBndVis];
    vcn4[0] =-25./12.;
    vcn4[1] = 4.;
    vcn4[2] =-3.;
    vcn4[3] = 4./3.;
    vcn4[4] =-1./4.;
    vcn1[0][0][0] -= vcn4[0];
    vcn1[0][1][0] -= vcn4[1];
    vcn1[0][2][0] -= vcn4[2];
    vcn1[0][3][0] -= vcn4[3];
    vcn1[0][4][0] -= vcn4[4];

    // multiply boundary rows by H^{-1}
    Array1D<double> norm(nBnd);
    norm(0) = 43200./13649.;
    norm(1) = 8640./12013.;
    norm(2) = 4320./2711.;
    norm(3) = 4320./5359.;
    norm(4) = 8640./7877.;
    norm(5) = 43200./43801.;
    norm(6) = 1.;
    norm(7) = 1.;
    norm(8) = 1.;
    for (int j=0; j<nBnd; j++){
      nj = vcn2[j][1];
      for (int m=0; m<nj; m++){
	nl = vcn3[j][m][1];
	for (int l=0; l<nl; l++) vcn1[j][m][l] *= norm(j);
      }}
    norm.deallocate();

    for (int j=nBnd; j<nStrandNode-nBnd; j++){ //interior coefficients
      vcn1[j][0][0] = 11./360.;
      vcn1[j][0][1] =-1./40.;
      vcn1[j][0][2] =-1./40.;
      vcn1[j][0][3] = 11./360.;
      
      vcn1[j][1][0] =-1./20.;
      vcn1[j][1][1] =-7./40.;
      vcn1[j][1][2] = 3./10.;
      vcn1[j][1][3] =-7./40.;
      vcn1[j][1][4] =-1./20.;
      
      vcn1[j][2][0] = 1./40.;
      vcn1[j][2][1] = 3./10.;
      vcn1[j][2][2] = 17./40.;
      vcn1[j][2][3] = 17./40.;
      vcn1[j][2][4] = 3./10.;
      vcn1[j][2][5] = 1./40.;

      vcn1[j][3][0] =-1./180.;
      vcn1[j][3][1] =-1./8.;
      vcn1[j][3][2] =-19./20.;
      vcn1[j][3][3] =-101./180.;
      vcn1[j][3][4] =-19./20.;
      vcn1[j][3][5] =-1./8.;
      vcn1[j][3][6] =-1./180.;

      vcn1[j][4][0] = 1./40.;
      vcn1[j][4][1] = 3./10.;
      vcn1[j][4][2] = 17./40.;
      vcn1[j][4][3] = 17./40.;
      vcn1[j][4][4] = 3./10.;
      vcn1[j][4][5] = 1./40.;

      vcn1[j][5][0] =-1./20.;
      vcn1[j][5][1] =-7./40.;
      vcn1[j][5][2] = 3./10.;
      vcn1[j][5][3] =-7./40.;
      vcn1[j][5][4] =-1./20.;

      vcn1[j][6][0] = 11./360.;
      vcn1[j][6][1] =-1./40.;
      vcn1[j][6][2] =-1./40.;
      vcn1[j][6][3] = 11./360.;
    }

    int p;
    i = nBnd-1;
    for (int j=nStrandNode-nBnd; j<nStrandNode; j++){ //tip coefficients
      j1 = vcn2[i][0];
      nj = vcn2[i][1];
      k  = nj-1;
      for (int m=0; m<nj; m++){
	l1 = vcn3[i][k][0];
	nl = vcn3[i][k][1];
	p  = nl-1;
	for (int l=0; l<nl; l++) vcn1[j][m][l] = vcn1[i][k][p--];
	k--;
      }
      i--;
    }
  }


  else{
    cout << "\nThis strand order not yet available for viscous terms." << endl;
    exit(0);
  }

  /*
  int j1,nj,l1,nl;
  double sum,sum2;
  for (int j=0; j<nStrandNode; j++){
    sum = 0.;
    j1 = vcn2[j][0];
    nj = vcn2[j][1];
    cout << "\nNode: " << j << " " << endl;
    for (int m=0; m<nj; m++){
      l1 = vcn3[j][m][0];
      nl = vcn3[j][m][1];
      //cout << "stencil loc: " << j1++ << " " << endl;
      sum2 = 0.;
      //for (int l=0; l<nl; l++) cout << l1++ << " " << vcn1[j][m][l] << endl;
      for (int l=0; l<nl; l++) sum  += vcn1[j][m][l];
      for (int l=0; l<nl; l++) sum2 += vcn1[j][m][l];
      cout << sum2 << endl;
    }
    //cout << sum << endl;
  }
  exit(0);
  */
}
