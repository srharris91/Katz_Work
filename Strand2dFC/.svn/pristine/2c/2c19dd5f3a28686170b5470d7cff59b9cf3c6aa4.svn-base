#include "Strand2dFCBlockSolver.h"


void Strand2dFCBlockSolver::reorderNodes()
{
  // resolve boundary types at surface corners with the system layer
  Array1D<int> flag(nSurfNode);
  int k;
  flag.set(-1);
  for (int n=0; n<nSurfElem; n++)
    for (int i=0; i<meshOrder+1; i++){
      k = surfElem(n,i);
      if (flag(k) >= 0) sys->bcConflict(1,&flag(k),&surfElemTag(n));
      else flag(k) = surfElemTag(n);
    }
  surfNodeTag.allocate(nSurfNode,2);
  for (int n=0; n<nSurfNode; n++) surfNodeTag(n,0) = flag(n);


  // set the boundary condition tag for the strand tips
  for (int n=0; n<nSurfNode; n++) surfNodeTag(n,1) = nCompBd-1;


  // reorder nodes, putting boundary nodes at the end of the list
  Array1D<int> nflag(nSurfNode);
  flag.set(-1);
  for (int n=0; n<nBndNode; n++) flag(bndNode(n)) = n;
  k = 0;
  for (int n=0; n<nSurfNode; n++) if (flag(n) <  0) nflag(n) = k++;
  for (int n=0; n<nSurfNode; n++) if (flag(n) > -1) nflag(n) = k++;
  if (k != nSurfNode){
    cout << "\n*** problem re-ordering nodes in connectivity.C ***" << endl;
    exit(0);
  }
  //for (int n=0; n<nSurfNode; n++) cout << n << " " << nflag(n) << endl;
  //exit(0);

  for (int n=0; n<nSurfElem; n++)
    for (int j=0; j<meshOrder+1; j++) surfElem(n,j) = nflag(surfElem(n,j));

  for (int n=0; n<nSurfElem0; n++)
    for (int j=0; j<meshOrder0+1; j++) surfElem0(n,j) = nflag(surfElem0(n,j));

  for (int n=0; n<nBndNode; n++) bndNode(n) = nflag(bndNode(n));

  Array2D<int> surfNodeTagT(nSurfNode,2);
  for (int n=0; n<nSurfNode; n++)
    for (int k=0; k<2; k++) surfNodeTagT(nflag(n),k) = surfNodeTag(n,k);
  for (int n=0; n<nSurfNode; n++)
    for (int k=0; k<2; k++) surfNodeTag(n,k) = surfNodeTagT(n,k);

  Array2D<double> surfXT(nSurfNode,2);
  for (int n=0; n<nSurfNode; n++)
    for (int j=0; j<2; j++) surfXT(nflag(n),j) = surfX(n,j);
  for (int n=0; n<nSurfNode; n++)
    for (int j=0; j<2; j++) surfX(n,j) = surfXT(n,j);

  Array2D<double> pointingVecT(nSurfNode,2);
  for (int n=0; n<nSurfNode; n++)
    for (int j=0; j<2; j++) pointingVecT(nflag(n),j) = pointingVec(n,j);
  for (int n=0; n<nSurfNode; n++)
    for (int j=0; j<2; j++) pointingVec(n,j) = pointingVecT(n,j);

  Array1D<int> clipT(nSurfNode);
  for (int n=0; n<nSurfNode; n++) clipT(nflag(n)) = clip(n);
  for (int n=0; n<nSurfNode; n++) clip(n) = clipT(n);

  for (int n=0; n<nSurfEdge; n++)
    for (int j=0; j<4; j++) surfEdge(n,j) = nflag(surfEdge(n,j));


  /*
  for (int n=0; n<nSurfElem; n++){
    cout << n << " ";
    for (int j=0; j<meshOrder+1; j++)
      cout << surfElem(n,j) << " ";
    cout << endl;
  }
  cout << "\n" << endl;
  for (int n=0; n<nBndNode; n++) cout << n << " " << bndNode(n) << endl;
  cout << "\n" << endl;
  for (int n=0; n<nSurfEdge; n++)
    cout << n << " "
	 << surfEdge(n,0) << " "
	 << surfEdge(n,1) << " "
	 << surfEdge(n,2) << " "
	 << surfEdge(n,3) << endl;
  exit(0);
  */


  // deallocate work arrays
  flag.deallocate();
  nflag.deallocate();
  surfNodeTagT.deallocate();
  surfXT.deallocate();
  pointingVecT.deallocate();
  clipT.deallocate();
}
