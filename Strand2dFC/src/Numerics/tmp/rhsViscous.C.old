#include "Strand2dFCBlockSolver.h"


void Strand2dFCBlockSolver::rhsViscous()
{
  // gradients of qa in n-direction
  int jH,mH;
  double dnr=1./deltaN;
  Array3D<double>
    fv(meshOrder+1,nStrandNode,nq),
    gv(meshOrder+1,nStrandNode,nq),
    qas(meshOrder+1,nStrandNode,nqaGradQa);
  Array3D<double> qan(nSurfNode,nStrandNode,nqaGradQa);
  qan.set(0.);
  for (int n=0; n<nSurfNode; n++){
    for (int j=0; j<nIcbNode; j++){ //root boundary nodes
      for (int m=0; m<nIcb; m++)
	for (int k=0; k<nqaGradQa; k++)
	  qan(n,j,k) += icb(j,m)*qa(n,m,iqagrad(k));
      for (int k=0; k<nqaGradQa; k++) qan(n,j,k) *= dnr;
    }
    for (int j=nIcbNode; j<nStrandNode-nIcbNode; j++){ //interior nodes
      for (int m=0; m<nIci; m++)
	for (int k=0; k<nqaGradQa; k++)
	  qan(n,j,k) += ici(m)*(qa(n,j+m+1,iqagrad(k))-qa(n,j-m-1,iqagrad(k)));
      for (int k=0; k<nqaGradQa; k++) qan(n,j,k) *= dnr;
    }
    jH = nIcbNode-1;
    for (int j=nStrandNode-nIcbNode; j<nStrandNode; j++){ //tip boundary nodes
      mH = nIcb-1;
      for (int m=0; m<nIcb; m++){
	for (int k=0; k<nqaGradQa; k++)
	  qan(n,j,k) -= icb(jH,mH)*qa(n,nStrandNode-nIcb+m,iqagrad(k));
	mH--;
      }
      for (int k=0; k<nqaGradQa; k++) qan(n,j,k) *= dnr;
      jH--;
    }}


  // surface edge viscous flux contributions
  if (surfOrder == 1 || surfOrder == 2){ //linear scheme
    int nm,ni,i1,i2,n1,n2,en,ei;
    double jac1,xs1,ys1,xn1,yn1,xn2,yn2,f1,f2,fI,qax[nqaGradQa],qay[nqaGradQa];
    for (int n=0; n<nSurfElem; n++){

      qas.set(0.); // local gradients of qa in s-direction
      for (int i=0; i<meshOrder+1; i++) // ith point in the element
	for (int m=0; m<meshOrder+1; m++){ // mth Lagrange poly. in mapping
	  nm = surfElem(n,m);
	  for (int j=0; j<nStrandNode; j++)
	    for (int k=0; k<nqaGradQa; k++)
	      qas(i,j,k) += ls(i,m)*qa(nm,j,iqagrad(k));
	}

      for (int i=0; i<meshOrder+1; i++){ // transform to x-y derivatives
	                                 // and compute viscous fluxes
	ni = surfElem(n,i);
	for (int j=0; j<nStrandNode; j++){
	  jac1 = 1./jac(n,i,j);
	  xs1  = xs(n,i,j)*jac1;
	  ys1  = ys(n,i,j)*jac1;
	  xn1  = xn(ni,j)*jac1;
	  yn1  = yn(ni,j)*jac1;
	  for (int k=0; k<nqaGradQa; k++){
	    qax[k] = yn1*qas(i,j,k)-ys1*qan(ni,j,k);
	    qay[k] =-xn1*qas(i,j,k)+xs1*qan(ni,j,k);
	  }
	  sys->rhsVisFlux(1,&q(ni,j,0),&qa(ni,j,0),&qax[0],&qay[0],
			  &fv(i,j,0),&gv(i,j,0));
	}}

      for (int i=0; i<nElemEdge; i++){ // flux balance
	i1 = elemEdge(i,0);
	i2 = elemEdge(i,1);
	n1 = surfElem(n,i1);
	n2 = surfElem(n,i2);
	for (int j=0; j<nStrandNode; j++){
	  xn1 = xn(n1,j);
	  yn1 = yn(n1,j);
	  xn2 = xn(n2,j);
	  yn2 = yn(n2,j);
	  for (int k=0; k<nq; k++){
	    f1         = yn1*fv(i1,j,k)-xn1*gv(i1,j,k);
	    f2         = yn2*fv(i2,j,k)-xn2*gv(i2,j,k);
	    fI         = .5*(f1+f2);
	    d(n1,j,k) -= fI;
	    d(n2,j,k) += fI;
	  }}}}

    for (int n=0; n<nBndNode; n++){ //boundary nodes
      n1 = bndNode(n);
      en = bndElem(n,0);
      ei = bndElem(n,1);

      qas.set(0.); // local gradients of qa in s-direction
      for (int m=0; m<meshOrder+1; m++){ // mth Lagrange poly. in mapping
	nm = surfElem(en,m);
	for (int j=0; j<nStrandNode; j++)
	  for (int k=0; k<nqaGradQa; k++)
	    qas(ei,j,k) += ls(ei,m)*qa(nm,j,iqagrad(k));
      }

      // transform to x-y derivatives and compute viscous fluxes
      for (int j=0; j<nStrandNode; j++){
	jac1 = 1./jac(en,ei,j);
	xs1  = xs(en,ei,j)*jac1;
	ys1  = ys(en,ei,j)*jac1;
	xn1  = xn(n1,j)*jac1;
	yn1  = yn(n1,j)*jac1;
	for (int k=0; k<nqaGradQa; k++){
	  qax[k] = yn1*qas(ei,j,k)-ys1*qan(n1,j,k);
	  qay[k] =-xn1*qas(ei,j,k)+xs1*qan(n1,j,k);
	}
	sys->rhsVisFlux(1,&q(n1,j,0),&qa(n1,j,0),&qax[0],&qay[0],
			&fv(ei,j,0),&gv(ei,j,0));
      }

      for (int j=0; j<nStrandNode; j++){
	xn1 = xn(n1,j);
	yn1 = yn(n1,j);
	for (int k=0; k<nq; k++){
	  fI         = yn1*fv(ei,j,k)-xn1*gv(ei,j,k);
	  d(n1,j,k) -= bndSign(n)*fI;
	}}}
  }

  else if (surfOrder == 3){ //corrected scheme
    cout << "***\nrhsViscous not yet done for surfOrder = 3.***" << endl;
    exit(0);
  }


  // strand edge viscous flux contributions
  Array4D<double> ds(nSurfElem,meshOrder+1,nStrandNode,nq);
  ds.set(0.);
  int nm,ni,i1,i2,n1,n2;
  double ds5=.5*deltaS,ds8=.125*deltaS*deltaS,ds6=deltaS/6.,
    jac1,xs1,ys1,xn1,yn1,jac2,xs2,ys2,xn2,yn2,f1,f2,fI,s1,s2,sa1,sa2,
    qax[nqaGradQa],qay[nqaGradQa],qanA[nqaGradQa],
    fv1[nq],gv1[nq],fv2[nq],gv2[nq];
  for (int n=0; n<nSurfElem; n++){

    qas.set(0.); // local gradients of qa in s-direction
    for (int i=0; i<meshOrder+1; i++) // ith point in the element
      for (int m=0; m<meshOrder+1; m++){ // mth Lagrange poly. in mapping
	nm = surfElem(n,m);
	for (int j=0; j<nStrandNode; j++)
	  for (int k=0; k<nqaGradQa; k++)
	    qas(i,j,k) += ls(i,m)*qa(nm,j,iqagrad(k));
      }

    for (int i=0; i<meshOrder+1; i++){
      ni = surfElem(n,i);

      int j=0;// root node
      /* // roots are assumed to be inviscid or viscous walls, which
	 // require no viscous flux contribution
      jac1 = 1./jac(n,i,j); //viscous flux at root
      xs1  = xs(n,i,j)*jac1;
      ys1  = ys(n,i,j)*jac1;
      xn1  = xn(ni,j)*jac1;
      yn1  = yn(ni,j)*jac1;
      for (int k=0; k<nqaGradQa; k++){
	qanA[k] = dnr*(qa(ni,j+1,iqagrad(k))-qa(ni,j,iqagrad(k)));
	qax[k]  = yn1*qas(i,j,k)-ys1*qanA[k];
	qay[k]  =-xn1*qas(i,j,k)+xs1*qanA[k];
      }
      sys->rhsVisFlux(1,&q(ni,j,0),&qa(ni,j,0),&qax[0],&qay[0],
		      &fv1[0],&gv1[0]);

      xs1  = xs(n,i,j); //flux contribution to root
      ys1  = ys(n,i,j);
      for (int k=0; k<nq; k++){
	f1             =-ys1*fv1[k]+xs1*gv1[k];
	fI             = f1;
	ds(n,i,j  ,k) += fI;
      }
      */

      // interior strand edges
      for (int j=0; j<nStrandNode-1; j++){
	jac1 = 1./jac(n,i,j); //viscous flux at j
	xs1  = xs(n,i,j)*jac1;
	ys1  = ys(n,i,j)*jac1;
	xn1  = xn(ni,j)*jac1;
	yn1  = yn(ni,j)*jac1;
	for (int k=0; k<nqaGradQa; k++){
	  qanA[k] = dnr*(qa(ni,j+1,iqagrad(k))-qa(ni,j,iqagrad(k)));
	  qax[k]  = yn1*qas(i,j,k)-ys1*qanA[k];
	  qay[k]  =-xn1*qas(i,j,k)+xs1*qanA[k];
	}
	sys->rhsVisFlux(1,&q(ni,j,0),&qa(ni,j,0),&qax[0],&qay[0],
			&fv1[0],&gv1[0]);

	jac2 = 1./jac(n,i,j+1); //viscous flux at j+1
	xs2  = xs(n,i,j+1)*jac2;
	ys2  = ys(n,i,j+1)*jac2;
	xn2  = xn(ni,j+1)*jac2;
	yn2  = yn(ni,j+1)*jac2;
	for (int k=0; k<nqaGradQa; k++){
	  qax[k] = yn2*qas(i,j+1,k)-ys2*qanA[k];
	  qay[k] =-xn2*qas(i,j+1,k)+xs2*qanA[k];
	}
	sys->rhsVisFlux(1,&q(ni,j+1,0),&qa(ni,j+1,0),&qax[0],&qay[0],
			&fv2[0],&gv2[0]);

	xs1  = xs(n,i,j); // flux balance
	ys1  = ys(n,i,j);
	xs2  = xs(n,i,j+1);
	ys2  = ys(n,i,j+1);
	for (int k=0; k<nq; k++){
	  f1             =-ys1*fv1[k]+xs1*gv1[k];
	  f2             =-ys2*fv2[k]+xs2*gv2[k];
	  fI             = .5*(f1+f2);
	  ds(n,i,j  ,k) -= fI;
	  ds(n,i,j+1,k) += fI;
	}}

      j    = nStrandNode-1;
      jac1 = 1./jac(n,i,j); //viscous flux at tip
      xs1  = xs(n,i,j)*jac1;
      ys1  = ys(n,i,j)*jac1;
      xn1  = xn(ni,j)*jac1;
      yn1  = yn(ni,j)*jac1;
      for (int k=0; k<nqaGradQa; k++){
	qanA[k] = dnr*(qa(ni,j,iqagrad(k))-qa(ni,j-1,iqagrad(k)));
	qax[k]  = yn1*qas(i,j,k)-ys1*qanA[k];
	qay[k]  =-xn1*qas(i,j,k)+xs1*qanA[k];
      }
      sys->rhsVisFlux(1,&q(ni,j,0),&qa(ni,j,0),&qax[0],&qay[0],
		      &fv1[0],&gv1[0]);

      xs1  = xs(n,i,j); //flux contribution to tip
      ys1  = ys(n,i,j);
      for (int k=0; k<nq; k++){
	f1             =-ys1*fv1[k]+xs1*gv1[k];
	fI             = f1;
	ds(n,i,j  ,k) -= fI;
      }}}

  for (int n=0; n<nSurfElem; n++)
    for (int i=0; i<meshOrder+1; i++){
      for (int k=0; k<nq; k++) ds(n,i,0,k) *= 2.*dnr;
      for (int j=1; j<nStrandNode-1; j++)
	for (int k=0; k<nq; k++) ds(n,i,j,k) *= dnr;
      for (int k=0; k<nq; k++) ds(n,i,nStrandNode-1,k) *= 2.*dnr;
    }

  // source treatment
  if (surfOrder == 1 || surfOrder == 2) //mass lumped
    for (int n=0; n<nSurfElem; n++)
      for (int i=0; i<nElemEdge; i++){
	i1 = elemEdge(i,0);
	i2 = elemEdge(i,1);
	n1 = surfElem(n,i1);
	n2 = surfElem(n,i2);
	for (int j=0; j<nStrandNode; j++)
	  for (int k=0; k<nq; k++){
	    d(n1,j,k) += .5*deltaS*ds(n,i1,j,k);
	    d(n2,j,k) += .5*deltaS*ds(n,i2,j,k);
	  }}

  /*
  else if (surfOrder == 2) //Galerkin
    for (int n=0; n<nSurfElem; n++)
      for (int i=0; i<nElemEdge; i++){
	i1 = elemEdge(i,0);
	i2 = elemEdge(i,1);
	n1 = surfElem(n,i1);
	n2 = surfElem(n,i2);
	for (int j=0; j<nStrandNode; j++)
	  for (int k=0; k<nq; k++){
	    s1         = ds(n,i1,j,k);
	    s2         = ds(n,i2,j,k);
	    sa1        = s1+s2;
	    sa2        = s1+s2;
	    d(n1,j,k) += ds6*(s1+sa1);
	    d(n2,j,k) += ds6*(s2+sa2);
	  }}
  */

  else if (surfOrder == 3){ //corrected source by edge
    Array3D<double> ss(meshOrder+1,nStrandNode,nq);
    Array3D<double> s2s(meshOrder+1,nStrandNode,nq);
    for (int n=0; n<nSurfElem; n++){
      ss.set(0.);
      s2s.set(0.);
      for (int i=0; i<meshOrder+1; i++) // ith point in the element
	for (int m=0; m<meshOrder+1; m++) // mth Lagrange poly. in mapping
	  for (int j=0; j<nStrandNode; j++)
	    for (int k=0; k<nq; k++)
	      ss(i,j,k) += ls(i,m)*ds(n,m,j,k);
      for (int i=0; i<meshOrder+1; i++) // ith point in the element
	for (int m=0; m<meshOrder+1; m++) // mth Lagrange poly. in mapping
	  for (int j=0; j<nStrandNode; j++)
	    for (int k=0; k<nq; k++)
	      s2s(i,j,k) += ls(i,m)*ss(m,j,k);
      for (int i=0; i<nElemEdge; i++){
	i1 = elemEdge(i,0);
	i2 = elemEdge(i,1);
	n1 = surfElem(n,i1);
	n2 = surfElem(n,i2);
	for (int j=0; j<nStrandNode; j++)
	  for (int k=0; k<nq; k++){
	    s1         = ds(n,i1,j,k);
	    s2         = ds(n,i2,j,k);
	    sa1        = s1+s2-ds5*(ss (i1,j,k)+ss (i2,j,k))
	                      -ds8*(s2s(i1,j,k)+s2s(i2,j,k));
	    sa2        = s1+s2+ds5*(ss (i1,j,k)+ss (i2,j,k))
	                      -ds8*(s2s(i1,j,k)+s2s(i2,j,k));
	    d(n1,j,k) += ds6*(s1+sa1);
	    d(n2,j,k) += ds6*(s2+sa2);
	  }}}
    ss.deallocate();
    s2s.deallocate();
  }


  // clean up
  fv.deallocate();
  gv.deallocate();
  qas.deallocate();
  qan.deallocate();
  ds.deallocate();
}
