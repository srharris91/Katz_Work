#include "Tri2dFCBlockSolver.h"


void Tri2dFCBlockSolver::rhsSourceMMS()
{
  if (surfOrder == 1 || surfOrder == 2) //mass lumped source by node
    for (int n=0; n<nSurfNode; n++)
      for (int j=0; j<nStrandNode; j++)
	for (int k=0; k<nq; k++) r(n,j,k) -= v(n,j)*s(n,j,k);

  else if (surfOrder == 3){ //corrected source by edge
    Array4D<double> ss(nSurfElem,meshOrder+1,nStrandNode,nq);
    Array4D<double> s2s(nSurfElem,meshOrder+1,nStrandNode,nq);
    ss.set(0.);
    s2s.set(0.);
    int nm;
    double lsm;
    for (int n=0; n<nSurfElem; n++)
      for (int i=0; i<meshOrder+1; i++) // ith point in the element
	for (int m=0; m<meshOrder+1; m++){ // mth Lagrange poly. in mapping
	  nm  = surfElem(n,m);
	  lsm = ls(i,m);
	  for (int j=0; j<nStrandNode; j++)
	    for (int k=0; k<nq; k++) ss(n,i,j,k) += lsm*jac(n,m,j)*s(nm,j,k);
	}
    for (int n=0; n<nSurfElem; n++)
      for (int i=0; i<meshOrder+1; i++) // ith point in the element
	for (int m=0; m<meshOrder+1; m++){ // mth Lagrange poly. in mapping
	  nm  = surfElem(n,m);
	  lsm = ls(i,m);
	  for (int j=0; j<nStrandNode; j++)
	    for (int k=0; k<nq; k++) s2s(n,i,j,k) += lsm*ss(n,m,j,k);
	}

    int i1,i2,n1,n2;
    double ds5=.5*deltaS,ds8=.125*deltaS*deltaS,ds6=deltaS/6.,
      jac1,jac2,s1,s2,sa1,sa2,sL,sR;
    for (int n=0; n<nSurfElem; n++)
      for (int i=0; i<nElemEdge; i++){
	i1 = elemEdge(i,0);
	i2 = elemEdge(i,1);
	n1 = surfElem(n,i1);
	n2 = surfElem(n,i2);
	for (int j=0; j<nStrandNode; j++){
	  jac1 = jac(n,i1,j);
	  jac2 = jac(n,i2,j);
	  for (int k=0; k<nq; k++){
	    s1         = jac1*s(n1,j,k);
	    s2         = jac2*s(n2,j,k);
	    sL         = s1-ds5*ss(n,i1,j,k)-ds8*s2s(n,i1,j,k);
	    sR         = s2-ds5*ss(n,i2,j,k)-ds8*s2s(n,i2,j,k);
	    sa1        = sL+sR;
	    sL         = s1+ds5*ss(n,i1,j,k)-ds8*s2s(n,i1,j,k);
	    sR         = s2+ds5*ss(n,i2,j,k)-ds8*s2s(n,i2,j,k);
	    sa2        = sL+sR;
	    r(n1,j,k) -= ds6*(s1+sa1);
	    r(n2,j,k) -= ds6*(s2+sa2);
	  }}}

    ss.deallocate();
    s2s.deallocate();
  }
}
