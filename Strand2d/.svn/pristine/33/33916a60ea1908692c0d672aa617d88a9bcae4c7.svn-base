#include "StrandBlockSolver.h"


void StrandBlockSolver::limit(const int& mglevel)
{
  if (mglevel == 0 && limFlag == 0){

    if (limiter == 0){
      for (int n=0; n<nEdges; n++)
	for(int j=0; j<nPstr+1; j++)
	  for (int k=0; k<nq; k++) lims(k,j,n) = 1.;
      for (int n=0; n<nFaces; n++)
	for(int j=0; j<nPstr+1; j++)
	  for (int k=0; k<nq; k++) limu(k,j,n) = 1.;
    }
    else{


      // unstructured limiter
      int c1,c2,c3,c4,fc,jp,jm;
      double dql,dqr,a;
      for (int n=0; n<nEdges-nBedges; n++){
	c1        = edge(0,n);
	c2        = edge(1,n);
	c3        = edgp(0,n);
	c4        = edgp(1,n);
	fc        = fClip(c1);
	if (fClip(c2) > fc) fc = fClip(c2);
      for(int j=1; j<fc+1; j++){
	for (int k=0; k<nq; k++){
	  dql       = q(k,j,c1)-q(k,j,c3);
	  dqr       = q(k,j,c4)-q(k,j,c2);
	  a         = fabs(dqr)+fabs(dql);
	  if (dlim(k) > a) a = dlim(k);
	  lims(k,j,n) = 1.-pow(fabs((dqr-dql)/a),3);
	}
	//lims(4,j,n) = 0.;
      }}
      for (int n=nEdges-nBedges; n<nEdges; n++)
	for(int j=1; j<nPstr+1; j++){
	  for (int k=0; k<nq; k++) lims(k,j,n) = 1.;
	  //lims(4,j,n) = 0.;
	}


      // structured limiter
      int nn=nPstr+1,fcm;
      Array2D<double> dqs(nq,nn);
      for (int n=0; n<nFaces; n++){
	fc         = fClip(n);
	fcm        = fc-1.;
      for (int j=1; j<fc; j++){
	jp         = j+1;
	for (int k=0; k<nq; k++)
	  dqs(k,j) = q(k,jp,n)-q(k,j,n);
      }
      for (int k=0; k<nq; k++){
	dqs(k,0 ) = dqs(k,1);
	dqs(k,fc) = dqs(k,fcm);
      }
      for (int j=1; j<fc; j++){
	jp         = j+1;
	jm         = j-1;
	for (int k=0; k<nq; k++){
	  dql        = dqs(k,jm);
	  dqr        = dqs(k,jp);
	  a          = fabs(dqr)+fabs(dql);
	  if (dlim(k) > a) a = dlim(k);
	  limu(k,j,n) = 1.-pow(fabs((dqr-dql)/a),3);
	}
	//limu(4,j,n) = 0.;
      }
      for (int k=0; k<nq; k++){
        limu(k,0 ,n) = 1.;
	limu(k,fc,n) = 1.;
      }
      //limu(4,0 ,n) = 0.;
      //limu(4,fc,n) = 0.;
      }
    limFlag = 1;
    }
  }
}
