#include "StrandBlockSolver.h"


void StrandBlockSolver::lhsViscousFine()
{
  int jj=nPstr+2,nn=nFaces+nBedges;
  Array4D<double> aa(nq,nq,jj,nn);
  for (int n=0; n<nFaces+nBedges; n++)
    for (int j=0; j<nPstr+2; j++)
      for (int k=0; k<nq; k++)
	for (int l=0; l<nq; l++) aa(l,k,j,n) = 0.;


  // unstructured faces
  int c1,c2,n1,n2,fc,jm,jp,m,mm,m1l,m1u,m2l,m2u,cc,i,il,npts;
  double dx1,dy1,dx2,dy2,ds,ae[nq*nq],qe[nq],qae[nqa],
    dq1,dq2,qxe[nq],qye[nq],qaxe[nqa],qaye[nqa];
  npts = 1;
  for (int n=0; n<nEdges; n++){
    c1              = edge(0,n);
    c2              = edge(1,n);
    n1              = edgn(n);
    m1l             = ncsc(c1  );
    m1u             = ncsc(c1+1);
    m2l             = ncsc(c2  );
    m2u             = ncsc(c2+1);
    cc              = ncsp(n1);
    fc              = max(fClip(c1),fClip(c2));
  for (int j=1; j<fc+1; j++){
    jm              = j-1;
    dx1             = x (0,j,n1)-x (0,jm,n1);
    dy1             = x (1,j,n1)-x (1,jm,n1);
    dx2             = xc(0,j,c2)-xc(0,j ,c1);
    dy2             = xc(1,j,c2)-xc(1,j ,c1);
    ds              = 1./(dx1*dy2-dx2*dy1);
    for (int k=0; k<nq; k++){
      dq1        = qp(k,j,n1)-qp(k,jm,n1);
      dq2        = q (k,j,c2)-q (k,j ,c1);
      qxe[k]     = ds*( dy2*dq1-dy1*dq2);
      qye[k]     = ds*(-dx2*dq1+dx1*dq2);
      qe[k]      = .5*(qp (k,j,n1)+qp (k,jm,n1));
    }
    for (int k=0; k<nqa; k++){
      dq1        = qap(k,j,n1)-qap(k,jm,n1);
      dq2        = qa (k,j,c2)-qa (k,j ,c1);
      qaxe[k]    = ds*( dy2*dq1-dy1*dq2);
      qaye[k]    = ds*(-dx2*dq1+dx1*dq2);
      qae[k]     = .5*(qap(k,j,n1)+qap(k,jm,n1));
    }
    sys->lhsVisFluxJacobian(npts,&facs(0,j,n),&qe[0],&qae[0],&qxe[0],&qye[0],
			    &qaxe[0],&qaye[0],&ae[0]);

    // fill in helper array with surrounding contributions
    if      (j  == 0    ) jj = 1;
    else if (j  == nPstr) jj = nPstr-1;
    else                  jj = j;
    for (int i=0; i<2; i++){
      indlsp(i,j,n1,il);
      for (int mm=0; mm<cc; mm++){
	nn = csp[n1][mm];
	for (int k=0; k<nq; k++){
	  m = k*nq;
	  for (int l=0; l<nq; l++)
	    aa(l,k,jj,nn) +=(.5*lsp[il][mm]*ae[m+l]);
	}} jj++;
    }
    if      (jm == 0    ) jj = 1;
    else if (jm == nPstr) jj = nPstr-1;
    else                  jj = jm;
    for (int i=0; i<2; i++){
      indlsp(i,jm,n1,il);
      for (int mm=0; mm<cc; mm++){
	nn = csp[n1][mm];
	for (int k=0; k<nq; k++){
	  m = k*nq;
	  for (int l=0; l<nq; l++)
	    aa(l,k,jj,nn) +=(.5*lsp[il][mm]*ae[m+l]);
	}} jj++;
    }

    /*
    for (int k=0; k<nq; k++){
      m = k*nq;
      for (int l=0; l<nq; l++){
	aa(l,k,j,c1) = .25*ae[m+l];
	aa(l,k,j,c2) = .25*ae[m+l];
      }}
    */
  

    // tri-diagonal contributions
    for (int k=0; k<nq; k++)
    for (int l=0; l<nq; l++){
      dd(l,k,j,c1) -= aa(l,k,j  ,c1);
      dp(l,k,j,c1) -= aa(l,k,j+1,c1);
      dm(l,k,j,c1) -= aa(l,k,j-1,c1);
      dd(l,k,j,c2) += aa(l,k,j  ,c2);
      dp(l,k,j,c2) += aa(l,k,j+1,c2);
      dm(l,k,j,c2) += aa(l,k,j-1,c2);
    }

    // off-diagonal contributions
    for (int mm=m1l; mm<m1u; mm++){
      nn            = csc(mm);
      for (int k=0; k<nq; k++){
	m           = k*nq;
      for (int l=0; l<nq; l++)
	bu(l,k,j,mm) -= aa(l,k,j,nn);
      }}
    for (int mm=m2l; mm<m2u; mm++){
      nn            = csc(mm);
      for (int k=0; k<nq; k++){
	m           = k*nq;
      for (int l=0; l<nq; l++)
	bu(l,k,j,mm) += aa(l,k,j,nn);
      }}

    // reset helper array to zero
    if      (j  == 0    ) jj = 1;
    else if (j  == nPstr) jj = nPstr-1;
    else                  jj = j;
    for (int i=0; i<2; i++){
      for (int mm=0; mm<cc; mm++){
	nn = csp[n1][mm];
	for (int k=0; k<nq; k++)
	  for (int l=0; l<nq; l++)
	    aa(l,k,jj,nn) = 0.;
      } jj++;
    }
    if      (jm == 0    ) jj = 1;
    else if (jm == nPstr) jj = nPstr-1;
    else                  jj = jm;
    for (int i=0; i<2; i++){
      for (int mm=0; mm<cc; mm++){
	nn = csp[n1][mm];
	for (int k=0; k<nq; k++)
	  for (int l=0; l<nq; l++)
	    aa(l,k,jj,nn) = 0.;
      } jj++;
    }
  }}


  // structured faces
  double eps=1.e-14;
  npts = 1;
  for (int n=0; n<nFaces-nGfaces; n++){
    n1             = face(0,n);
    n2             = face(1,n);
    m1l            = ncsc(n  );
    m1u            = ncsc(n+1);
    c1             = ncsp(n1);
    c2             = ncsp(n2);
  for (int j=0; j<fClip(n)+1; j++){
    jp             = j+1;
    dx1            = x (0,j ,n2)-x (0,j,n1);
    dy1            = x (1,j ,n2)-x (1,j,n1);
    dx2            = xc(0,jp,n )-xc(0,j,n );
    dy2            = xc(1,jp,n )-xc(1,j,n );
    ds             = dx1*dy2-dx2*dy1;
    if (fabs(ds) < eps) for (int k=0; k<nq*nq; k++) ae[k] = 0.;
    else{
      ds         = 1./ds;
      for (int k=0; k<nq; k++){
	dq1      = qp(k,j ,n2)-qp(k,j,n1);
	dq2      = q (k,jp,n )-q (k,j,n );
	qxe[k]   = ds*( dy2*dq1-dy1*dq2);
	qye[k]   = ds*(-dx2*dq1+dx1*dq2);
	qe[k]    = .5*(qp (k,j,n1)+qp (k,j,n2));
      }
      for (int k=0; k<nqa; k++){
	dq1      = qap(k,j ,n2)-qap(k,j,n1);
	dq2      = qa (k,jp,n )-qa (k,j,n );
	qaxe[k]  = ds*( dy2*dq1-dy1*dq2);
	qaye[k]  = ds*(-dx2*dq1+dx1*dq2);
	qae[k]   = .5*(qap(k,j,n1)+qap(k,j,n2));
      }
      sys->lhsVisFluxJacobian(npts,&facu(0,j,n),&qe[0],&qae[0],&qxe[0],&qye[0],
			      &qaxe[0],&qaye[0],&ae[0]);

      // fill in helper array with surrounding contributions
      if      (j  == 0    ) jj = 1;
      else if (j  == nPstr) jj = nPstr-1;
      else                  jj = j;
      for (int i=0; i<2; i++){
	indlsp(i,j,n1,il);
	for (int mm=0; mm<c1; mm++){
	  nn = csp[n1][mm];
	  for (int k=0; k<nq; k++){
	    m = k*nq;
	    for (int l=0; l<nq; l++)
	      aa(l,k,jj,nn) +=(.5*lsp[il][mm]*ae[m+l]);
	  }}
	indlsp(i,j,n2,il);
	for (int mm=0; mm<c2; mm++){
	  nn = csp[n2][mm];
	  for (int k=0; k<nq; k++){
	    m = k*nq;
	    for (int l=0; l<nq; l++)
	      aa(l,k,jj,nn) +=(.5*lsp[il][mm]*ae[m+l]);
	  }}
	jj++;
      }

      /*
      for (int k=0; k<nq; k++){
	m = k*nq;
	for (int l=0; l<nq; l++){
	  aa(l,k,j ,n) = .25*ae[m+l];
	  aa(l,k,jp,n) = .25*ae[m+l];
	}}
      */

      // tri-diagonal contributions
      for (int k=0; k<nq; k++)
      for (int l=0; l<nq; l++){
	dd(l,k,j ,n) -= aa(l,k,j   ,n);
	dp(l,k,j ,n) -= aa(l,k,j +1,n);
	if (j != 0) dm(l,k,j ,n) -= aa(l,k,j -1,n);
	dd(l,k,jp,n) += aa(l,k,jp  ,n);
	if (jp != nPstr+1) dp(l,k,jp,n) += aa(l,k,jp+1,n);
	dm(l,k,jp,n) += aa(l,k,jp-1,n);
      }

      // off-diagonal contributions
      for (int mm=m1l; mm<m1u; mm++){
	nn            = csc(mm);
	for (int k=0; k<nq; k++){
	  m           = k*nq;
	  for (int l=0; l<nq; l++){
	    bu(l,k,j ,mm) -= aa(l,k,j ,nn);
	    bu(l,k,jp,mm) += aa(l,k,jp,nn);
	  }}}

    // reset helper array to zero
      if      (j  == 0    ) jj = 1;
      else if (j  == nPstr) jj = nPstr-1;
      else                  jj = j;
      for (int i=0; i<2; i++){
	for (int mm=0; mm<c1; mm++){
	  nn = csp[n1][mm];
	  for (int k=0; k<nq; k++)
	    for (int l=0; l<nq; l++)
	      aa(l,k,jj,nn) = 0.;
	}
	for (int mm=0; mm<c2; mm++){
	  nn = csp[n2][mm];
	  for (int k=0; k<nq; k++)
	    for (int l=0; l<nq; l++)
	      aa(l,k,jj,nn) = 0.;
	}
	jj++;
      }
    }}}

  aa.deallocate();
}
