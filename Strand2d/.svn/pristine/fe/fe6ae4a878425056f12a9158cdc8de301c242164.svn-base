/**
 * \brief
 * Class StrandSPLam
 * holds the data and specifies the operations for the single phase inviscid
 * or laminar viscous system of equations.
 * \author
 * Aaron Katz
 * \version
 * 1.0
 * \date
 * 2012-09-11
 */

#ifndef included_StrandSPLam
#define included_StrandSPLam

#include "StrandSystem.h"
#include "State.h"
#include "Transport.h"
#include "Solution.h"
#include "StrandSPLamBc.h"
#include "StrandSPLamBcInviscidWall.h"
#include "StrandSPLamBcViscousWall.h"
#include "StrandSPLamBcInflow.h"
#include "StrandSPLamBcOutflow.h"
#include "StrandSPLamBcFarField.h"
#include "StrandSPLamBcDirichlet.h"
#include "StrandSPLamBcFrozen.h"


class StrandSPLam: public StrandSystem
{
 public:

  /**
   * \brief
   * Constructor for the StrandSPLam class.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-11
   * \par Further Documentation:
   * \par Source Code:
   * \snippet src/System/SPLam/StrandSPLam.C StrandSPLam
   */
  StrandSPLam();

  /**
   * \brief
   * Destructor for the StrandSPLam class.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-11
   * \par Further Documentation:
   * \par Source Code:
   * \snippet src/System/SPLam/StrandSPLam.C ~StrandSPLam
   */
  ~StrandSPLam();

  /**
   * \brief
   * Reads inputs for the System layer, and allocates instances of
   * boundary conditions and Physics classes.
   * \param inputFile name of System input file.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-11
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/inputRead.C
   */
  void inputRead(const string& inputFile);

  /**
   * \brief
   * Provides relevant Aystem data to the Numerics routines
   * \param iPrint Specifes whether inputs are printed out; usually iprint
   * is set to 1 in node 0.
   * \param iTest Specifies whether run is in unit test mode.
   * \param iDebug Specifies whether run is in debug mode, i.e., triggers
   * more verbose data.
   * \param tmp Temporary dimension of iqgrad,iqgrada. Typically set to
   * something large, like 500. This is needed because the main program
   * does not know the dimension of iqgrad,iqagrad yet.
   * \param nq Total number of equations or Q variables in system.
   * \param nqa Total number of additional variables to be stored.
   * \param ndim Number of spatial dimensions.
   * \param inviscid Flag to add inviscid terms (0 do not add, 1 add).
   * \param viscous Flag to add viscous terms (0 do not add, 1 add).
   * \param source Flag to add physical source terms
   * (0 do not add, 1 physical source).
   * \param sourceMMS Flag to add MMS source terms
   * (0 do not add, 1 MMS source).
   * \param dissipation Flag to add dissipation (0 do not add, 1 add).
   * \param nBpatches Number of boundary patches.
   * \param iqgrad Dimension (tmp), flag for whether gradient of Q is
   * required: 0 or 1 for each.
   * \param iqagrad Dimension (tmp), flag for whether gradient of Qa is
   * required: 0 or 1 for each.
   * \param dlim Constant used in limiter computations.
   * \param rmsNorm normalization values for Q.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-11
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/prepSetup.C
   */
  void prepSetup(const int& iPrint,
		 const int& iTest,
		 const int& iDebug,
		 const int& tmp,
		 int& nq,
		 int& nqa,
		 int& ndim,
		 int& inviscid,
		 int& viscous,
		 int& source,
		 int& sourceMMS,
		 int& dissipation,
		 int& nBpatches,
		 int* iqgradT,
		 int* iqagradT,
		 double* dlim,
		 double* rmsNorm);

  /**
   * \brief
   * Initializes q over a set of dof locations.
   * \param npts Number of points at which to set q.
   * \param x Coordinates of each dof, laid out in (x,y) pairs.
   * \param q Solution vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-25
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/initFlow.C
   */
  void initFlow(const int& npts,
		const double* x,
		double* q);

  /**
   * \brief
   * Initializes source terms over a set of dof locations.
   * \param npts Number of points at which to set q.
   * \param x Coordinates of each dof, laid out in (x,y) pairs.
   * \param s Source term vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-25
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/initSource.C
   */
  void initSource(const int& npts,
		  const double* x,
		  double* s);

  /**
   * \brief
   * Initializes source terms over a set of boundary dof locations.
   * \param npts Number of points at which to set q.
   * \param tag Tag number of the boundary dofs.
   * \param x Coordinates of each dof, laid out in (x,y) pairs.
   * \param s Source term vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-25
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/initSource.C
   */
  void initSource(const int& npts,
		  const int* tag,
		  const double* x,
		  double* s);

  /**
   * \brief
   * Computes additional variables as a function of Q.
   * \param npts Number of points at which to set qa.
   * \param q Q vector.
   * \param qa Additional Q vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/stepQAdd.C
   */
  void stepQAdd(const int& npts,
		const double* q,
		double* qa);

  /**
   * \brief
   * Provides max inviscid eigenvalue at an edge separating volumes 1 and 2.
   * \param npts Number of edges at which to compute spectral radius.
   * \param A Face area in (Ax,Ay) pairs.
   * \param xv Mesh velocity dotted with face area.
   * \param q1 Q vector at volume 1.
   * \param q2 Q vector at volume 2.
   * \param qa1 Qa vector at volume 1.
   * \param qa2 Qa vector at volume 2.
   * \param sr Spectral radius.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/stepInvEigenvalue.C
   */
  void stepInvEigenvalue(const int& npts,
			 const double* A,
			 const double* xv,
			 const double* q1,
			 const double* q2,
			 const double* qa1,
			 const double* qa2,
			 double* sr);

  /**
   * \brief
   * Provides max viscous eigenvalue at an edge separating volumes 1 and 2.
   * \param npts Number of edges at which to compute spectral radius.
   * \param A Face area in (Ax,Ay) pairs.
   * \param q1 Q vector at volume 1.
   * \param q2 Q vector at volume 2.
   * \param qa1 Qa vector at volume 1.
   * \param qa2 Qa vector at volume 2.
   * \param v1 Volume 1.
   * \param v2 Volume 2.
   * \param sr Spectral radius.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/stepVisEigenvalue.C
   */
  void stepVisEigenvalue(const int& npts,
			 const double* A,
			 const double* q1,
			 const double* q2,
			 const double* qa1,
			 const double* qa2,
			 const double* v1,
			 const double* v2,
			 double* sr);

  /**
   * \brief
   * Provides max source eigenvalue.
   * \param npts Number of points at which to compute spectral radius.
   * \param q Q vector.
   * \param qa Qa vector.
   * \param sr Spectral radius.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/stepSourceEigenvalue.C
   */
  void stepSourceEigenvalue(const int& npts,
			    const double* q,
			    const double* qa,
			    double* sr);

  /**
   * \brief
   * Provides inviscid flux at interface given a series of left and right states.
   * \param npts Number of points at which to compute spectral radius.
   * \param A Face area in (Ax,Ay) pairs.
   * \param xv Mesh velocity dotted with face area.
   * \param ql Q vector at left state.
   * \param qr Q vector at right state.
   * \param f Inviscid flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsInvFlux.C
   */
  void rhsInvFlux(const int& npts,
		  const double* A,
		  const double* xv,
		  const double* ql,
		  const double* qr,
		  double* f);

  /**
   * \brief
   * Provides disspation flux at interface given a series of left and
   * right states.
   * \param npts Number of points at which to compute spectral radius.
   * \param A Face area in (Ax,Ay) pairs.
   * \param xv Mesh velocity dotted with face area.
   * \param ql Q vector at left state.
   * \param qr Q vector at right state.
   * \param f Dissipation flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsDisFlux.C
   */
  void rhsDisFlux(const int& npts,
		  const double* A,
		  const double* xv,
		  const double* ql,
		  const double* qr,
		  double* f);

  /**
   * \brief
   * Provides dissipation flux at interface given a series of left and
   * right states at coarse MG levels.
   * \param npts Number of points at which to compute spectral radius.
   * \param A Face area in (Ax,Ay) pairs.
   * \param xv Mesh velocity dotted with face area.
   * \param ql Q vector at left state.
   * \param qr Q vector at right state.
   * \param f Dissipation flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-10
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsDisFluxCoarse.C
   */
  void rhsDisFluxCoarse(const int& npts,
			const double* A,
			const double* xv,
			const double* ql,
			const double* qr,
			double* f);

  /**
   * \brief
   * Provides viscous flux at interface given interface states and gradients.
   * \param npts Number of points at which to compute spectral radius.
   * \param A Face area in (Ax,Ay) pairs.
   * \param q Q vector at interface.
   * \param qa Qa vector at interface.
   * \param qx X-component of gradient of Q vector at interface.
   * \param qy Y-component of gradient of Q vector at interface.
   * \param qax X-component of gradient of Qa vector at interface.
   * \param qay Y-component of gradient of Qa vector at interface.
   * \param f Viscous flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-23
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsVisFlux.C
   */
  void rhsVisFlux(const int& npts,
		  const double* A,
		  const double* q,
		  const double* qa,
		  const double* qx,
		  const double* qy,
		  const double* qax,
		  const double* qay,
		  double* f);

  /**
   * \brief
   * Provides viscous flux at interface on coarse MG levels.
   * \param npts Number of points at which to compute spectral radius.
   * \param A Face area in (Ax,Ay) pairs.
   * \param vl Volume at left state.
   * \param vr Volume at right state.
   * \param ql Q vector at left state.
   * \param qr Q vector at right state.
   * \param qal Qa vector at left state.
   * \param qar Qa vector at right state.
   * \param f Viscous flux vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-23
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsVisFluxCoarse.C
   */
  void rhsVisFluxCoarse(const int& npts,
			const double* A,
			const double* vl,
			const double* vr,
			const double* ql,
			const double* qr,
			const double* qal,
			const double* qar,
			double* f);

  /**
   * \brief
   * Provides BC vector for a series of Q and extrapolated values 
   * (Neumann gradient conditions to be added soon)
   * \param npts Number of points at which to compute spectral radius.
   * \param nx Outward boundary normal in (nx,ny) pairs.
   * \param wx Wall velocity in (wx,wy) pairs.
   * \param qe Extrapolated Q vector at boundary location.
   * \param qae Extrapolated Qa vector at boundary location.
   * \param q Qa vector of boundary dof.
   * \param qa Qa vector of boundary dof.
   * \param r BC vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-27
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/rhsBCVector.C
   */
  void rhsBCVector(const int& npts,
		   const int* tag,
		   const double* nx,
		   const double* wx,
		   const double* qe,
		   const double* qae,
		   const double* q,
		   const double* qa,
		   double* r);

  /**
   * \brief
   * Provides inviscid flux Jacobian for a series of locations.
   * \param npts Number of points at which to compute inviscid Jacobian.
   * \param A Face area in (Ax,Ay) pairs.
   * \param xv Mesh velocity dotted with face area.
   * \param q Q vector.
   * \param qa Qa vector.
   * \param M Inviscid flux Jacobian matrix (row order).
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-30
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/lhsInvFluxJacobian.C
   */
  void lhsInvFluxJacobian(const int& npts,
			  const double* A,
			  const double* xv,
			  const double* q,
			  const double* qa,
			  double* M);

  /**
   * \brief
   * Provides dissipative flux Jacobian for a series of locations.
   * \param npts Number of points at which to compute dissipative Jacobian.
   * \param A Face area in (Ax,Ay) pairs.
   * \param xv Mesh velocity dotted with face area.
   * \param ql Q vector at left state.
   * \param qr Q vector at right state.
   * \param M Inviscid flux Jacobian matrix (row order).
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-30
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/lhsDisFluxJacobian.C
   */
  void lhsDisFluxJacobian(const int& npts,
			  const double* A,
			  const double* xv,
			  const double* ql,
			  const double* qr,
			  double* M);

  /**
   * \brief
   * Provides viscous flux Jacobian at interface.
   * \param npts Number of points at which to compute viscous Jacobian.
   * \param A Face area in (Ax,Ay) pairs.
   * \param B Vector with which to dot x,y viscous matrices in (Bx,By) pairs.
   * \param qe Q vector at cell interface.
   * \param qae Qa vector at cell interface.
   * \param M Viscous flux Jacobian matrix (row order).
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-27
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/lhsVisFluxJacobian.C
   */
  void lhsVisFluxJacobian(const int& npts,
			  const double* A,
			  const double* B,
			  const double* qe,
			  const double* qae,
			  double* M);

  /**
   * \brief
   * Provides boundary Jacobian contribution for the boundary dof itself.
   * \param npts Number of points at which to compute boundary Jacobian.
   * \param nx Outward boundary normal in (nx,ny) pairs.
   * \param qe Extrapolated Q vector at boundary location.
   * \param qae Extrapolated Qa vector at boundary location.
   * \param q Q vector of boundary dof.
   * \param qa Qa vector of boundary dof.
   * \param M Boundary condition Jacobian matrix (row order) for self.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-27
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/lhsBCVectorSelfJacobian.C
   */
  void lhsBCVectorSelfJacobian(const int& npts,
			       const int* tag,
			       const double* nx,
			       const double* qe,
			       const double* qae,
			       const double* q,
			       const double* qa,
			       double* M);

  /**
   * \brief
   * Provides boundary Jacobian contribution for the interior location.
   * \param npts Number of points at which to compute boundary Jacobian.
   * \param nx Outward boundary normal in (nx,ny) pairs.
   * \param qe Extrapolated Q vector at boundary location.
   * \param qae Extrapolated Qa vector at boundary location.
   * \param q Q vector of boundary dof.
   * \param qa Qa vector of boundary dof.
   * \param M Boundary condition Jacobian matrix (row order) for interior.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-27
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/lhsBCVectorInteriorJacobian.C
   */
  void lhsBCVectorInteriorJacobian(const int& npts,
				   const int* tag,
				   const double* nx,
				   const double* qe,
				   const double* qae,
				   const double* q,
				   const double* qa,
				   double* M);

  /**
   * \brief
   * Provides Jacobian of the primitive variables with respect to the
   * conserved variables.
   * \param npts Number of points at which to compute Jacobian.
   * \param q Q vector of boundary dof.
   * \param qa Qa vector of boundary dof.
   * \param M Jacobian matrix (row order).
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-27
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/lhsPrimVarJacobian.C
   */
  void lhsPrimVarJacobian(const int& npts,
			  const double* q,
			  const double* qa,
			  double* M);

  /**
   * \brief
   * Initializes output at each physical time step.
   * \param step Physical time step.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-25
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/outputInitialize.C
   */
  void outputInitialize(const int& step);

  /**
   * \brief
   * Initializes output at each physical time step.
   * \param ffile Physical time step.
   * \param npts number of points.
   * \param q Q vector.
   * \param qa Qa vector.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-25
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/outputSolution.C
   */
  void outputSolution(ofstream& ffile,
		      const int& npts,
		      const double* q,
		      const double* qa);

  /**
   * \brief
   * Computes surface forces for surface faces given q on those faces.
   * \param npts Number of points at which to set q.
   * \param tag Tag number of the surface dofs.
   * \param facu Face area components, laid out in (Ax,Ay) pairs.
   * \param q Q vector at the surface faces.
   * \param qa Additional Q vector at the surface faces.
   * \param qx Gradient of Q vector at the surface faces.
   * \param qax Gradient of additional Q vector at the surface faces.
   * \param force Force components at each of the surface faces, laid out in
   * (Fx,Fy) pairs.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-09-25
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/outputSurfaceForces.C
   */
  void outputSurfaceForces(const int& npts,
			   const int* tag,
			   const double* A,
			   const double* q,
			   const double* qa,
			   const double* qx,
			   const double* qax,
			   double* force);

  /**
   * \brief
   * Finalizes the StrandSystem class instance.
   * \author
   * Aaron Katz
   * \version
   * 1.0
   * \date
   * 2012-10-04
   * \par Further Documentation:
   * \par Source Code:
   * \include src/System/SPLam/finalize.C
   */
  void finalize();


 private:

  State state;
  Transport transport;
  Solution solution;
  StrandSPLamBc** bc;
  double gamma;
  double gm1;
  double ggm1;
  double rGas;
};
#endif
